#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm
	c14962 [label=<<table title="pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../models/algorithms/constrainedpolyline/ConstrainedPolylineAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConstrainedPolylineAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.constrainedpolyline </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - polyline : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ConstrainedPolylineAlgorithm(stGraphG : pfc.models.Graph, paths : pfc.models.algorithms.NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getPolyline() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getLongEdgePositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getMedianPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, path : pfc.models.algorithms.DirectedPath) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="../models/algorithms/constrainedpolyline/ConstrainedPolylineAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c14964 [label=<<table title="pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../models/algorithms/constrainedvisrep/ConstrainedVisRepAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.constrainedvisrep </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - stDualG : pfc.models.algorithms.DualPathGraph </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ConstrainedVisRepAlgorithm(stGraphG : pfc.models.Graph, paths : pfc.models.algorithms.NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + getStDualG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getStGraphG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingY() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingX() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + numberY(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + numberX(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + getPathFace(path : pfc.models.algorithms.DirectedPath) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getNumberXPaths(v : pfc.models.Vertex) : java.util.List&lt;java.lang.Integer&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="../models/algorithms/constrainedvisrep/ConstrainedVisRepAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm
	c14967 [label=<<table title="pfc.models.algorithms.orthogonal.OrthogonalAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../models/algorithms/orthogonal/OrthogonalAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrthogonalAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.orthogonal </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - orthogonal : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - digraph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - pathToVertices : java.util.Map&lt;pfc.models.algorithms.DirectedPath, java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.orthogonal.OrthogonalAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + OrthogonalAlgorithm(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getOrthogonal() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getDigraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - orientGraph() </td></tr>
<tr><td align="left" balign="left"> - selectPaths() </td></tr>
<tr><td align="left" balign="left"> - createPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - getLeftmostIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getRightmostOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getNeighborsIn(in : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - getNeighborsOut(out : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - joinPaths(allPaths : java.util.List&lt;pfc.models.algorithms.DirectedPath&gt;, path : pfc.models.algorithms.DirectedPath) </td></tr>
<tr><td align="left" balign="left"> - executeVisibility() </td></tr>
<tr><td align="left" balign="left"> - constructVertices() </td></tr>
<tr><td align="left" balign="left"> - getPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getSTAxeXCoordinate(neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : int </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getAssociatedPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - constructEdges() </td></tr>
<tr><td align="left" balign="left"> - calculateBends(e : pfc.models.Edge, newE : pfc.models.Edge) : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendFromSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendSourcePositioning(s : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendTargetPositioning(t : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - isProblematicSTEdge(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, st : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../models/algorithms/orthogonal/OrthogonalAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm
	c14970 [label=<<table title="pfc.models.algorithms.polyline.UpwardPolylineAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../models/algorithms/polyline/UpwardPolylineAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UpwardPolylineAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.polyline </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm </td></tr>
<tr><td align="left" balign="left"> - polyline : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.polyline.UpwardPolylineAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UpwardPolylineAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getPolyline() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - getLongEdgePositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getMedianPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="../models/algorithms/polyline/UpwardPolylineAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm
	c14973 [label=<<table title="pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../models/algorithms/polylinedominance/PolylineDominanceAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PolylineDominanceAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.polylinedominance </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - slDominance : pfc.models.algorithms.sldominance.SLDominanceAlgorithm </td></tr>
<tr><td align="left" balign="left"> - reduced : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - dummyVertices : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + PolylineDominanceAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getDominanceDrawing() : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> + getReduced() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - makeGraphReduced() </td></tr>
<tr><td align="left" balign="left"> - insertDummyVertex(e : pfc.models.Edge) </td></tr>
<tr><td align="left" balign="left"> - constructSLDominanceDrawing() </td></tr>
<tr><td align="left" balign="left"> - turnDummyVerticesIntoBends() </td></tr>
		</table></td></tr>
		</table>>, URL="../models/algorithms/polylinedominance/PolylineDominanceAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm
	c14976 [label=<<table title="pfc.models.algorithms.sldominance.SLDominanceAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../models/algorithms/sldominance/SLDominanceAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SLDominanceAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.sldominance </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - dominance : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> - rotationsOut : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - rotationsIn : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.sldominance.SLDominanceAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - count : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SLDominanceAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - preprocessGraph() </td></tr>
<tr><td align="left" balign="left"> - nextOut(v : pfc.models.Vertex, n : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - predOut(v : pfc.models.Vertex, n : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - firstOut(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - lastOut(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - firstIn(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - lastIn(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - assignPreliminaryCoordinates() </td></tr>
<tr><td align="left" balign="left"> - labelX(v : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - labelY(v : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinates() </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinatesX() </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinatesY() </td></tr>
<tr><td align="left" balign="left"> - initXCoordinateVertices() : java.util.TreeSet&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - initYCoordinateVertices() : java.util.TreeSet&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - equalsDegreeInOut(u : pfc.models.Vertex, v : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../models/algorithms/sldominance/SLDominanceAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm
	c14983 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../models/algorithms/visibilityrepresentation/VisibilityRepresentationAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VisibilityRepresentationAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - stDualG : pfc.models.algorithms.DualGraph </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VisibilityRepresentationAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getStDualG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getStGraphG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingY() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingX() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX() </td></tr>
<tr><td align="left" balign="left"> - numberY(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - numberX(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
		</table></td></tr>
		</table>>, URL="../models/algorithms/visibilityrepresentation/VisibilityRepresentationAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.resources.StringBundle
	c14987 [label=<<table title="pfc.resources.StringBundle" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./StringBundle.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StringBundle </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - instance : ResourceBundle </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - StringBundle() </td></tr>
<tr><td align="left" balign="left"> + get(key : String) : String </td></tr>
		</table></td></tr>
		</table>>, URL="./StringBundle.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm NAVASSOC pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c14962:p -> c14964:p [taillabel="", label="", headlabel="-visibility", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.resources.StringBundle
	c14962:p -> c14987:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm DEPEND pfc.resources.StringBundle
	c14964:p -> c14987:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm NAVASSOC pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c14967:p -> c14964:p [taillabel="", label="", headlabel="-visibility", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.resources.StringBundle
	c14967:p -> c14987:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm NAVASSOC pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm
	c14970:p -> c14983:p [taillabel="", label="", headlabel="-visibility", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.resources.StringBundle
	c14970:p -> c14987:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm NAVASSOC pfc.models.algorithms.sldominance.SLDominanceAlgorithm
	c14973:p -> c14976:p [taillabel="", label="", headlabel="-slDominance", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm DEPEND pfc.resources.StringBundle
	c14973:p -> c14987:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm DEPEND pfc.resources.StringBundle
	c14973:p -> c14987:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm DEPEND pfc.resources.StringBundle
	c14976:p -> c14987:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm DEPEND pfc.resources.StringBundle
	c14983:p -> c14987:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

