#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.utilities.WebUtilities
	c2320 [label=<<table title="pfc.utilities.WebUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./WebUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> WebUtilities </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ browsers : String[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + WebUtilities() </td></tr>
<tr><td align="left" balign="left"> + downloadFile(url : String, filename : String) </td></tr>
<tr><td align="left" balign="left"> + launchBrowser(url : String) </td></tr>
		</table></td></tr>
		</table>>, URL="./WebUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.TransformUtilities
	c2321 [label=<<table title="pfc.utilities.TransformUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TransformUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> TransformUtilities </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TransformUtilities() </td></tr>
<tr><td align="left" balign="left"> + zoomFit(transform : AffineTransform, objectRectangle : Rectangle2D, componentRectangle : Rectangle2D) </td></tr>
<tr><td align="left" balign="left"> + zoomCenter(transform : AffineTransform, center : Point2D.Double, factor : double) </td></tr>
<tr><td align="left" balign="left"> + zoomMax(transform : AffineTransform) </td></tr>
<tr><td align="left" balign="left"> + zoomOneToOne(transform : AffineTransform) </td></tr>
		</table></td></tr>
		</table>>, URL="./TransformUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.SvgUtilities
	c2322 [label=<<table title="pfc.utilities.SvgUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SvgUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SvgUtilities </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SvgUtilities() </td></tr>
<tr><td align="left" balign="left"> + formatColor(c : Color) : String </td></tr>
<tr><td align="left" balign="left"> + formatString(s : String) : String </td></tr>
		</table></td></tr>
		</table>>, URL="./SvgUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.StateSupport
	c2323 [label=<<table title="pfc.utilities.StateSupport" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./StateSupport.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StateSupport </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + StateSupport() </td></tr>
<tr><td align="left" balign="left"> + addStateChangeListener(listener : ChangeListener) </td></tr>
<tr><td align="left" balign="left"> + removeStateChangeListener(listener : ChangeListener) </td></tr>
<tr><td align="left" balign="left"> + fireStateChangedEvent() </td></tr>
		</table></td></tr>
		</table>>, URL="./StateSupport.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.SnapshotList<T>
	c2324 [label=<<table title="pfc.utilities.SnapshotList" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SnapshotList.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SnapshotList&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - current : SnapshotList.Snapshot&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - newest : SnapshotList.Snapshot&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - oldest : SnapshotList.Snapshot&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - capacity : int </td></tr>
<tr><td align="left" balign="left"> - size : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SnapshotList(snapshot : T) </td></tr>
<tr><td align="left" balign="left"> + add(snapshot : T) </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + current() : T </td></tr>
<tr><td align="left" balign="left"> + getCapacity() : int </td></tr>
<tr><td align="left" balign="left"> + next() : T </td></tr>
<tr><td align="left" balign="left"> + previous() : T </td></tr>
<tr><td align="left" balign="left"> + setCapacity(capacity : int) </td></tr>
<tr><td align="left" balign="left"> + setBeginning() </td></tr>
		</table></td></tr>
		</table>>, URL="./SnapshotList.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.JsonUtilities
	c2325 [label=<<table title="pfc.utilities.JsonUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./JsonUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> JsonUtilities </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + JsonUtilities() </td></tr>
<tr><td align="left" balign="left"> + formatArray(i : Iterable&lt;?&gt;) : String </td></tr>
<tr><td align="left" balign="left"> - formatColor(color : Color) : String </td></tr>
<tr><td align="left" balign="left"> + formatObject(members : Map&lt;String, Object&gt;) : String </td></tr>
<tr><td align="left" balign="left"> + formatString(s : String) : String </td></tr>
<tr><td align="left" balign="left"> + formatValue(o : Object) : String </td></tr>
<tr><td align="left" balign="left"> - parseArray(tokenizer : JsonUtilities.JsonScanner) : Iterable&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + parseArray(json : String) : Iterable&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> - parseColor(json : String) : Color </td></tr>
<tr><td align="left" balign="left"> - parseObject(tokenizer : JsonUtilities.JsonScanner) : Map&lt;String, Object&gt; </td></tr>
<tr><td align="left" balign="left"> + parseObject(json : String) : Map&lt;String, Object&gt; </td></tr>
<tr><td align="left" balign="left"> + parseString(json : String) : String </td></tr>
<tr><td align="left" balign="left"> + parseValue(json : String) : Object </td></tr>
		</table></td></tr>
		</table>>, URL="./JsonUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.JsonUtilities.JsonScanner
	c2326 [label=<<table title="pfc.utilities.JsonUtilities.JsonScanner" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./JsonUtilities.JsonScanner.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> JsonScanner </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - eof : boolean </td></tr>
<tr><td align="left" balign="left"> - index : int </td></tr>
<tr><td align="left" balign="left"> - previousChar : char </td></tr>
<tr><td align="left" balign="left"> - reader : Reader </td></tr>
<tr><td align="left" balign="left"> - usePrevious : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + JsonUtilities.JsonScanner(s : String) </td></tr>
<tr><td align="left" balign="left"> + end() : boolean </td></tr>
<tr><td align="left" balign="left"> + moveBack() </td></tr>
<tr><td align="left" balign="left"> + nextChar() : char </td></tr>
<tr><td align="left" balign="left"> + nextChars(n : int) : String </td></tr>
<tr><td align="left" balign="left"> + nextNonWhitespaceChar() : char </td></tr>
<tr><td align="left" balign="left"> + nextString(quote : char) : String </td></tr>
<tr><td align="left" balign="left"> + nextValue() : Object </td></tr>
		</table></td></tr>
		</table>>, URL="./JsonUtilities.JsonScanner.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.GraphUtilities
	c2327 [label=<<table title="pfc.utilities.GraphUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GraphUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GraphUtilities </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GraphUtilities() </td></tr>
<tr><td align="left" balign="left"> + getVerticesDepthFirstSearch(v : Vertex, graph : Graph) : Collection&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesSpanningTree(v : Vertex, graph : Graph) : Collection&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalSorting(v : Vertex, graph : Graph) : Map&lt;Float, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumbering(v : Vertex, graph : Graph) : Map&lt;Vertex, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumbering(v : Vertex, graph : Graph, seed : float, weight : float) : Map&lt;Vertex, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getDirectedPlanarGraph(graph : Graph) : Graph </td></tr>
<tr><td align="left" balign="left"> + findStronglyConnectedComponents(graph : Graph) : Collection&lt;Collection&lt;Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + findWeaklyConnectedComponents(graph : Graph) : Collection&lt;Collection&lt;Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + findBiconnectedComponents(graph : Graph) : Set&lt;Set&lt;Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + findBiconnectedCutPoints(graph : Graph) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + isBiconnected(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSTGraph(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + areSTOnOuterFace(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isReducedDigraph(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isTransitiveEdge(graph : Graph, e : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + isPlanarEmbedding(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMaximumDegree(g : Graph) : int </td></tr>
<tr><td align="left" balign="left"> + getMaximumDegree(g : Graph, selected : List&lt;Vertex&gt;) : int </td></tr>
<tr><td align="left" balign="left"> + getDistanceMatrix(graph : Graph, weighted : boolean) : double[][] </td></tr>
		</table></td></tr>
		</table>>, URL="./GraphUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.GeometryUtilities
	c2328 [label=<<table title="pfc.utilities.GeometryUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GeometryUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GeometryUtilities </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GeometryUtilities() </td></tr>
<tr><td align="left" balign="left"> + angle(x : double, y : double) : double </td></tr>
<tr><td align="left" balign="left"> + angleBetween(angle0 : double, angle1 : double) : double </td></tr>
<tr><td align="left" balign="left"> + areClose(point : Point2D, line : Line2D) : boolean </td></tr>
<tr><td align="left" balign="left"> + determinant(A : double[][]) : double </td></tr>
<tr><td align="left" balign="left"> + distance(v0 : Vertex, v1 : Vertex) : double </td></tr>
<tr><td align="left" balign="left"> + distanceSq(v0 : Vertex, v1 : Vertex) : double </td></tr>
<tr><td align="left" balign="left"> + getBounds(graph : Graph) : Rectangle2D </td></tr>
<tr><td align="left" balign="left"> + getCrossings(arc0 : Arc2D, arc0Center : Point2D, arc1 : Arc2D, arc1Center : Point2D) : Vector&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getCrossings(line : Line2D, arc : Arc2D, arcCenter : Point2D) : Vector&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getCrossings(line0 : Line2D, line1 : Line2D) : Vector&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + isBetween(a : Point2D, b : Point2D, c : Point2D) : boolean </td></tr>
<tr><td align="left" balign="left"> + midpoint(x0 : double, y0 : double, x1 : double, y1 : double) : Point2D </td></tr>
<tr><td align="left" balign="left"> + midpoint(v0 : Vertex, v1 : Vertex) : Point2D </td></tr>
<tr><td align="left" balign="left"> + threeOutOfFourPoint(x0 : double, y0 : double, x1 : double, y1 : double) : Point2D </td></tr>
<tr><td align="left" balign="left"> + threeOutOfFourPoint(v0 : Vertex, v1 : Vertex) : Point2D </td></tr>
<tr><td align="left" balign="left"> + slope(x0 : double, y0 : double, x1 : double, y1 : double) : double </td></tr>
<tr><td align="left" balign="left"> + slope(line : Line2D) : double </td></tr>
<tr><td align="left" balign="left"> + getClockwiseAngle(p1 : Point2D, p2 : Point2D, p3 : Point2D) : double </td></tr>
<tr><td align="left" balign="left"> + getAngle(p1 : Point2D, p2 : Point2D, p3 : Point2D, p4 : Point2D) : double </td></tr>
<tr><td align="left" balign="left"> + getTheClosestVertexToOrigin(graph : Graph) : Vertex </td></tr>
<tr><td align="left" balign="left"> + isCloserToOrigin(v1 : Vertex, v2 : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getTheFarthestVertexToOrigin(graph : Graph) : Vertex </td></tr>
<tr><td align="left" balign="left"> + calculateSignedPolygonArea(polygon : List&lt;Point2D&gt;) : double </td></tr>
<tr><td align="left" balign="left"> + getPolygonCentroid(polygon : List&lt;Point2D&gt;) : Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="./GeometryUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.ColorUtilities
	c2329 [label=<<table title="pfc.utilities.ColorUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ColorUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ColorUtilities </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ColorUtilities() </td></tr>
<tr><td align="left" balign="left"> + blend(c0 : Color, c1 : Color) : Color </td></tr>
		</table></td></tr>
		</table>>, URL="./ColorUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
}

