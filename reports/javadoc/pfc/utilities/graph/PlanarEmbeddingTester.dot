#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.Graph
	c12474 [label=<<table title="pfc.models.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../models/Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Graph </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + name : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + vertices : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + edges : java.util.List&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + areLoopsAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areMultipleEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areDirectedEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areCyclesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> - incidences : java.util.Map&lt;pfc.models.Vertex, java.util.Set&lt;pfc.models.Edge&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - newLabelAvailable : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Graph() </td></tr>
<tr><td align="left" balign="left"> + Graph(attributes : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Graph(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Graph(name : java.lang.String, areLoopsAllowed : boolean, areDirectedEdgesAllowed : boolean, areMultipleEdgesAllowed : boolean, areCyclesAllowed : boolean) </td></tr>
<tr><td align="left" balign="left"> + areConnected(from : pfc.models.Vertex, to : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdges(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges(from : pfc.models.Vertex, to : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesFrom(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesTo(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighbors(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsIn(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsOut(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsInOut(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedEdges() : java.util.List&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedVertices() : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + hasSelectedEdges() : boolean </td></tr>
<tr><td align="left" balign="left"> + hasSelectedVertices() : boolean </td></tr>
<tr><td align="left" balign="left"> + selectAll(select : boolean) </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + translateSelected(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + union(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + setNewVertexLabelAvailable(newVertex : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + getNewLabelAvailable() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getVertexSource() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexTarget() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../models/Graph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Edge
	c12475 [label=<<table title="pfc.models.Edge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../models/Edge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Edge </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isDirected : boolean </td></tr>
<tr><td align="left" balign="left"> + from : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + to : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + isLoop : boolean </td></tr>
<tr><td align="left" balign="left"> + weight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + label : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + thickness : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleX : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleY : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> - arc : java.awt.geom.Arc2D.Double </td></tr>
<tr><td align="left" balign="left"> - line : java.awt.geom.Line2D.Double </td></tr>
<tr><td align="left" balign="left"> - center : java.awt.geom.Point2D.Double </td></tr>
<tr><td align="left" balign="left"> - bends : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - isLinear : boolean </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - vertexObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int, label : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int, label : java.lang.String, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Edge(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Edge(json : java.lang.String, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + getArc() : java.awt.geom.Arc2D </td></tr>
<tr><td align="left" balign="left"> + getCenter() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getHandlePoint2D() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getLine() : java.awt.geom.Line2D </td></tr>
<tr><td align="left" balign="left"> + getBends() : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getTotalOfBends() : int </td></tr>
<tr><td align="left" balign="left"> + setBends(bends : java.util.List&lt;java.awt.geom.Point2D&gt;) </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(edge : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + isIncident(vertex : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + isLinear() : boolean </td></tr>
<tr><td align="left" balign="left"> + isPolyline() : boolean </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : java.lang.Object) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateArc() </td></tr>
<tr><td align="left" balign="left"> - updateCenter() </td></tr>
		</table></td></tr>
		</table>>, URL="../../models/Edge.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.GraphUtilities
	c12521 [label=<<table title="pfc.utilities.GraphUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../GraphUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GraphUtilities </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GraphUtilities() </td></tr>
<tr><td align="left" balign="left"> + getVerticesDepthFirstSearch(v : pfc.models.Vertex, graph : pfc.models.Graph) : java.util.Collection&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesSpanningTree(v : pfc.models.Vertex, graph : pfc.models.Graph) : java.util.Collection&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalSorting(v : pfc.models.Vertex, graph : pfc.models.Graph) : java.util.Map&lt;java.lang.Float, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumbering(v : pfc.models.Vertex, graph : pfc.models.Graph) : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumbering(v : pfc.models.Vertex, graph : pfc.models.Graph, seed : float, weight : float) : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getDirectedPlanarGraph(graph : pfc.models.Graph) : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + findStronglyConnectedComponents(graph : pfc.models.Graph) : java.util.Collection&lt;java.util.Collection&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + findWeaklyConnectedComponents(graph : pfc.models.Graph) : java.util.Collection&lt;java.util.Collection&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + findBiconnectedComponents(graph : pfc.models.Graph) : java.util.Set&lt;java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + findBiconnectedCutPoints(graph : pfc.models.Graph) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + isBiconnected(graph : pfc.models.Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSTGraph(graph : pfc.models.Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + areSTOnOuterFace(graph : pfc.models.Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isReducedDigraph(graph : pfc.models.Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isTransitiveEdge(graph : pfc.models.Graph, e : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + isPlanarEmbedding(graph : pfc.models.Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMaximumDegree(g : pfc.models.Graph) : int </td></tr>
<tr><td align="left" balign="left"> + getMaximumDegree(g : pfc.models.Graph, selected : java.util.List&lt;pfc.models.Vertex&gt;) : int </td></tr>
<tr><td align="left" balign="left"> + getDistanceMatrix(graph : pfc.models.Graph, weighted : boolean) : double[][] </td></tr>
		</table></td></tr>
		</table>>, URL="../GraphUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.GeometryUtilities
	c12522 [label=<<table title="pfc.utilities.GeometryUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../GeometryUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GeometryUtilities </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GeometryUtilities() </td></tr>
<tr><td align="left" balign="left"> + angle(x : double, y : double) : double </td></tr>
<tr><td align="left" balign="left"> + angleBetween(angle0 : double, angle1 : double) : double </td></tr>
<tr><td align="left" balign="left"> + areClose(point : java.awt.geom.Point2D, line : java.awt.geom.Line2D) : boolean </td></tr>
<tr><td align="left" balign="left"> + determinant(A : double[][]) : double </td></tr>
<tr><td align="left" balign="left"> + distance(v0 : pfc.models.Vertex, v1 : pfc.models.Vertex) : double </td></tr>
<tr><td align="left" balign="left"> + distanceSq(v0 : pfc.models.Vertex, v1 : pfc.models.Vertex) : double </td></tr>
<tr><td align="left" balign="left"> + getBounds(graph : pfc.models.Graph) : java.awt.geom.Rectangle2D </td></tr>
<tr><td align="left" balign="left"> + getCrossings(arc0 : java.awt.geom.Arc2D, arc0Center : java.awt.geom.Point2D, arc1 : java.awt.geom.Arc2D, arc1Center : java.awt.geom.Point2D) : java.util.Vector&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getCrossings(line : java.awt.geom.Line2D, arc : java.awt.geom.Arc2D, arcCenter : java.awt.geom.Point2D) : java.util.Vector&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getCrossings(line0 : java.awt.geom.Line2D, line1 : java.awt.geom.Line2D) : java.util.Vector&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + isBetween(a : java.awt.geom.Point2D, b : java.awt.geom.Point2D, c : java.awt.geom.Point2D) : boolean </td></tr>
<tr><td align="left" balign="left"> + midpoint(x0 : double, y0 : double, x1 : double, y1 : double) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + midpoint(v0 : pfc.models.Vertex, v1 : pfc.models.Vertex) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + threeOutOfFourPoint(x0 : double, y0 : double, x1 : double, y1 : double) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + threeOutOfFourPoint(v0 : pfc.models.Vertex, v1 : pfc.models.Vertex) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + slope(x0 : double, y0 : double, x1 : double, y1 : double) : double </td></tr>
<tr><td align="left" balign="left"> + slope(line : java.awt.geom.Line2D) : double </td></tr>
<tr><td align="left" balign="left"> + getClockwiseAngle(p1 : java.awt.geom.Point2D, p2 : java.awt.geom.Point2D, p3 : java.awt.geom.Point2D) : double </td></tr>
<tr><td align="left" balign="left"> + getAngle(p1 : java.awt.geom.Point2D, p2 : java.awt.geom.Point2D, p3 : java.awt.geom.Point2D, p4 : java.awt.geom.Point2D) : double </td></tr>
<tr><td align="left" balign="left"> + getTheClosestVertexToOrigin(graph : pfc.models.Graph) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + isCloserToOrigin(v1 : pfc.models.Vertex, v2 : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getTheFarthestVertexToOrigin(graph : pfc.models.Graph) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + calculateSignedPolygonArea(polygon : java.util.List&lt;java.awt.geom.Point2D&gt;) : double </td></tr>
<tr><td align="left" balign="left"> + getPolygonCentroid(polygon : java.util.List&lt;java.awt.geom.Point2D&gt;) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="../GeometryUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.PlanarEmbeddingTester
	c12528 [label=<<table title="pfc.utilities.graph.PlanarEmbeddingTester" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./PlanarEmbeddingTester.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PlanarEmbeddingTester </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + PlanarEmbeddingTester() </td></tr>
<tr><td align="left" balign="left"> + isPlanarEmbedding(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + keepPlanarEmbeddingEdge(graph : Graph, e1 : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> - areCrossed(e1 : Edge, e2 : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> - getNumberOfCrossings(e1 : Edge, e2 : Edge) : int </td></tr>
		</table></td></tr>
		</table>>, URL="./PlanarEmbeddingTester.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Graph NAVASSOC pfc.models.Edge
	c12474:p -> c12475:p [taillabel="", label="", headlabel="*\n-edges", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.GraphUtilities DEPEND pfc.utilities.graph.PlanarEmbeddingTester
	c12521:p -> c12528:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.PlanarEmbeddingTester DEPEND pfc.models.Graph
	c12528:p -> c12474:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.PlanarEmbeddingTester DEPEND pfc.models.Edge
	c12528:p -> c12475:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.PlanarEmbeddingTester DEPEND pfc.utilities.GeometryUtilities
	c12528:p -> c12522:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

