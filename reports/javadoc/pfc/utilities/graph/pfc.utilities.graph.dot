#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.utilities.graph.WeaklyConnectedComponentsFinder
	c2454 [label=<<table title="pfc.utilities.graph.WeaklyConnectedComponentsFinder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./WeaklyConnectedComponentsFinder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> WeaklyConnectedComponentsFinder </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - random : Random </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + WeaklyConnectedComponentsFinder() </td></tr>
<tr><td align="left" balign="left"> + find(graph : Graph) : Collection&lt;Collection&lt;Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - findParent(node : WeaklyConnectedComponentsFinder.Node) : WeaklyConnectedComponentsFinder.Node </td></tr>
<tr><td align="left" balign="left"> - unionSets(a : WeaklyConnectedComponentsFinder.Node, b : WeaklyConnectedComponentsFinder.Node) </td></tr>
		</table></td></tr>
		</table>>, URL="./WeaklyConnectedComponentsFinder.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.WeaklyConnectedComponentsFinder.Node
	c2455 [label=<<table title="pfc.utilities.graph.WeaklyConnectedComponentsFinder.Node" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./WeaklyConnectedComponentsFinder.Node.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Node </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + parent : WeaklyConnectedComponentsFinder.Node </td></tr>
<tr><td align="left" balign="left"> + vertex : Vertex </td></tr>
<tr><td align="left" balign="left"> + rank : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + WeaklyConnectedComponentsFinder.Node(vertex : Vertex) </td></tr>
		</table></td></tr>
		</table>>, URL="./WeaklyConnectedComponentsFinder.Node.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.StronglyConnectedComponentsFinder
	c2456 [label=<<table title="pfc.utilities.graph.StronglyConnectedComponentsFinder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./StronglyConnectedComponentsFinder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StronglyConnectedComponentsFinder </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - index : int </td></tr>
<tr><td align="left" balign="left"> - stack : Stack&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - indices : Map&lt;Vertex, Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - lowLinks : Map&lt;Vertex, Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - isOnStack : Map&lt;Vertex, Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> - components : Collection&lt;Collection&lt;Vertex&gt;&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + StronglyConnectedComponentsFinder() </td></tr>
<tr><td align="left" balign="left"> + find(graph : Graph) : Collection&lt;Collection&lt;Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - tarjansAlgorithm(from : Vertex, graph : Graph) </td></tr>
		</table></td></tr>
		</table>>, URL="./StronglyConnectedComponentsFinder.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.RoyFloydWarshallDistancesAlgorithm
	c2457 [label=<<table title="pfc.utilities.graph.RoyFloydWarshallDistancesAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RoyFloydWarshallDistancesAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RoyFloydWarshallDistancesAlgorithm </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RoyFloydWarshallDistancesAlgorithm() </td></tr>
<tr><td align="left" balign="left"> + getDistanceMatrix(graph : Graph, weighted : boolean) : double[][] </td></tr>
		</table></td></tr>
		</table>>, URL="./RoyFloydWarshallDistancesAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.PlanarEmbeddingTester
	c2458 [label=<<table title="pfc.utilities.graph.PlanarEmbeddingTester" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./PlanarEmbeddingTester.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PlanarEmbeddingTester </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + PlanarEmbeddingTester() </td></tr>
<tr><td align="left" balign="left"> + isPlanarEmbedding(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + keepPlanarEmbeddingEdge(graph : Graph, e1 : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> - areCrossed(e1 : Edge, e2 : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> - getNumberOfCrossings(e1 : Edge, e2 : Edge) : int </td></tr>
		</table></td></tr>
		</table>>, URL="./PlanarEmbeddingTester.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.DigraphTester
	c2459 [label=<<table title="pfc.utilities.graph.DigraphTester" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DigraphTester.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DigraphTester </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DigraphTester() </td></tr>
<tr><td align="left" balign="left"> + isSTGraph(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + areSTVerticesOnOuterFace(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isReducedDigraph(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isTransitiveEdge(graph : Graph, e : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + areConnected(graph : Graph, from : Vertex, to : Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./DigraphTester.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.DepthFirstSearchFinder
	c2460 [label=<<table title="pfc.utilities.graph.DepthFirstSearchFinder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DepthFirstSearchFinder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DepthFirstSearchFinder </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - verticesExplored : Collection&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - edgesExplored : Collection&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalSorting : Map&lt;Float, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumbering : Map&lt;Vertex, Float&gt; </td></tr>
<tr><td align="left" balign="left"> - order : Float </td></tr>
<tr><td align="left" balign="left"> - seed : Float </td></tr>
<tr><td align="left" balign="left"> - weight : Float </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DepthFirstSearchFinder() </td></tr>
<tr><td align="left" balign="left"> + DepthFirstSearchFinder(seed : float, weight : float) </td></tr>
<tr><td align="left" balign="left"> + depthFirstSearch(v : Vertex, graph : Graph) : Collection&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + spanningTree(v : Vertex, graph : Graph) : Collection&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + topologicalSorting(v : Vertex, graph : Graph) : Map&lt;Float, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + topologicalNumbering(v : Vertex, graph : Graph) : Map&lt;Vertex, Float&gt; </td></tr>
<tr><td align="left" balign="left"> - depthFirstSearchAlgorithm(v : Vertex, graph : Graph) </td></tr>
		</table></td></tr>
		</table>>, URL="./DepthFirstSearchFinder.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.DegreeCounter
	c2461 [label=<<table title="pfc.utilities.graph.DegreeCounter" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DegreeCounter.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DegreeCounter </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DegreeCounter() </td></tr>
<tr><td align="left" balign="left"> + getMaximumDegree(g : Graph) : int </td></tr>
<tr><td align="left" balign="left"> + getMaximumDegree(g : Graph, selectedVertices : List&lt;Vertex&gt;) : int </td></tr>
		</table></td></tr>
		</table>>, URL="./DegreeCounter.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.BipolarOrientationTarjanAlgorithm
	c2462 [label=<<table title="pfc.utilities.graph.BipolarOrientationTarjanAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./BipolarOrientationTarjanAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BipolarOrientationTarjanAlgorithm </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - graph : Graph </td></tr>
<tr><td align="left" balign="left"> - directed : Graph </td></tr>
<tr><td align="left" balign="left"> - source : Vertex </td></tr>
<tr><td align="left" balign="left"> - target : Vertex </td></tr>
<tr><td align="left" balign="left"> - pre_dfs_num : Map&lt;Vertex, Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - low : Map&lt;Vertex, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - parents : Map&lt;Vertex, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - sign : Map&lt;Vertex, Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> - listL : List&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - preorder : Deque&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - current : int </td></tr>
<tr><td align="left" balign="left"> - plus : boolean </td></tr>
<tr><td align="left" balign="left"> - minus : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BipolarOrientationTarjanAlgorithm(graph : Graph) </td></tr>
<tr><td align="left" balign="left"> + orientPlanarGraph() : Graph </td></tr>
<tr><td align="left" balign="left"> - dfs(v : Vertex) </td></tr>
		</table></td></tr>
		</table>>, URL="./BipolarOrientationTarjanAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm
	c2463 [label=<<table title="pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./BipolarOrientationPapamanthouAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BipolarOrientationPapamanthouAlgorithm </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - graph : Graph </td></tr>
<tr><td align="left" balign="left"> - directed : Graph </td></tr>
<tr><td align="left" balign="left"> - source : Vertex </td></tr>
<tr><td align="left" balign="left"> - target : Vertex </td></tr>
<tr><td align="left" balign="left"> - counter : Integer </td></tr>
<tr><td align="left" balign="left"> - n : int </td></tr>
<tr><td align="left" balign="left"> - setQ : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - timestamp : Map&lt;Vertex, Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - stNumbering : Map&lt;Vertex, Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - leafBlocks : Map&lt;Vertex, Set&lt;Vertex&gt;&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BipolarOrientationPapamanthouAlgorithm(graph : Graph) </td></tr>
<tr><td align="left" balign="left"> + orientPlanarGraph() : Graph </td></tr>
<tr><td align="left" balign="left"> - stOrientationRecursive(v : Vertex) </td></tr>
<tr><td align="left" balign="left"> - chooseNextSource(nextSources : Set&lt;Vertex&gt;) : Vertex </td></tr>
<tr><td align="left" balign="left"> - updateBlocksCutPointsTree() </td></tr>
		</table></td></tr>
		</table>>, URL="./BipolarOrientationPapamanthouAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.BiconnectedComponentsFinder
	c2464 [label=<<table title="pfc.utilities.graph.BiconnectedComponentsFinder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./BiconnectedComponentsFinder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BiconnectedComponentsFinder </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - dfs_num : Map&lt;Vertex, Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - high : Map&lt;Vertex, Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - parents : Map&lt;Vertex, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - bicomponents : Set&lt;Set&lt;Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - cut_points : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - stack : Stack&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> - converse_depth : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BiconnectedComponentsFinder() </td></tr>
<tr><td align="left" balign="left"> + isBiconnected(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + getCutPoints(graph : Graph) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getBiconnectedComponents(graph : Graph) : Set&lt;Set&lt;Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + find(graph : Graph) </td></tr>
<tr><td align="left" balign="left"> - findBiconnectedComponents(graph : Graph, v : Vertex, bicomponents : Set&lt;Set&lt;Vertex&gt;&gt;) </td></tr>
		</table></td></tr>
		</table>>, URL="./BiconnectedComponentsFinder.html", fontname="arial", fontcolor="black", fontsize=9.0];
}

