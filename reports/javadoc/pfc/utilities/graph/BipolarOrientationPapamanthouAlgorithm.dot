#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.Vertex
	c3539 [label=<<table title="pfc.models.Vertex" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../models/Vertex.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Vertex </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + id : pfc.models.ObservableModel.Property&lt;java.util.UUID&gt; </td></tr>
<tr><td align="left" balign="left"> + x : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + y : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + label : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + radius : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + weight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Vertex() </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double, color : int, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Vertex(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Vertex(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getPoint2D() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + isIncident(edge : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : java.lang.Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../models/Vertex.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Graph
	c3543 [label=<<table title="pfc.models.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../models/Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Graph </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + name : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + vertices : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + edges : java.util.List&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + areLoopsAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areMultipleEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areDirectedEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areCyclesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> - incidences : java.util.Map&lt;pfc.models.Vertex, java.util.Set&lt;pfc.models.Edge&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - newLabelAvailable : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Graph() </td></tr>
<tr><td align="left" balign="left"> + Graph(attributes : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Graph(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Graph(name : java.lang.String, areLoopsAllowed : boolean, areDirectedEdgesAllowed : boolean, areMultipleEdgesAllowed : boolean, areCyclesAllowed : boolean) </td></tr>
<tr><td align="left" balign="left"> + areConnected(from : pfc.models.Vertex, to : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdges(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges(from : pfc.models.Vertex, to : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesFrom(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesTo(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighbors(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsIn(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsOut(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsInOut(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedEdges() : java.util.List&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedVertices() : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + hasSelectedEdges() : boolean </td></tr>
<tr><td align="left" balign="left"> + hasSelectedVertices() : boolean </td></tr>
<tr><td align="left" balign="left"> + selectAll(select : boolean) </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + translateSelected(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + union(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + setNewVertexLabelAvailable(newVertex : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + getNewLabelAvailable() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getVertexSource() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexTarget() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../models/Graph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Edge
	c3544 [label=<<table title="pfc.models.Edge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../models/Edge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Edge </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isDirected : boolean </td></tr>
<tr><td align="left" balign="left"> + from : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + to : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + isLoop : boolean </td></tr>
<tr><td align="left" balign="left"> + weight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + label : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + thickness : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleX : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleY : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> - arc : java.awt.geom.Arc2D.Double </td></tr>
<tr><td align="left" balign="left"> - line : java.awt.geom.Line2D.Double </td></tr>
<tr><td align="left" balign="left"> - center : java.awt.geom.Point2D.Double </td></tr>
<tr><td align="left" balign="left"> - bends : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - isLinear : boolean </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - vertexObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int, label : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int, label : java.lang.String, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Edge(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Edge(json : java.lang.String, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + getArc() : java.awt.geom.Arc2D </td></tr>
<tr><td align="left" balign="left"> + getCenter() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getHandlePoint2D() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getLine() : java.awt.geom.Line2D </td></tr>
<tr><td align="left" balign="left"> + getBends() : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getTotalOfBends() : int </td></tr>
<tr><td align="left" balign="left"> + setBends(bends : java.util.List&lt;java.awt.geom.Point2D&gt;) </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(edge : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + isIncident(vertex : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + isLinear() : boolean </td></tr>
<tr><td align="left" balign="left"> + isPolyline() : boolean </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : java.lang.Object) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateArc() </td></tr>
<tr><td align="left" balign="left"> - updateCenter() </td></tr>
		</table></td></tr>
		</table>>, URL="../../models/Edge.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.settings.UserSettings
	c3580 [label=<<table title="pfc.settings.UserSettings" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../settings/UserSettings.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UserSettings </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.settings </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + instance : pfc.settings.UserSettings </td></tr>
<tr><td align="left" balign="left"> + defaultVertexWeight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultVertexColor : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultVertexPrefix : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultVertexRadius : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultVertexIsSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultEdgeWeight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultEdgeColor : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultEdgePrefix : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultEdgeThickness : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultEdgeHandleRadiusRatio : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultLoopDiameter : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultEdgeIsSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultShowVertexWeights : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultShowVertexLabels : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultShowEdgeHandles : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultShowEdgeWeights : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultShowEdgeLabels : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + graphBackground : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + selectionBoxFill : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + selectionBoxLine : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + vertexLine : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + selectedVertexFill : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + selectedVertexLine : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + draggingEdge : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeHandle : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + selectedEdge : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + selectedEdgeHandle : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + uncoloredEdgeLine : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + uncoloredDualEdgeLine : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + uncoloredVertexFill : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + uncoloredDualVertexFill : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + vertexLabelColor : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + elementColors : pfc.models.ObservableList&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + vertexClickMargin : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeHandleClickMargin : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + panDecelerationFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + panOnDoubleClick : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + deselectVertexWithNewEdge : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + zoomInFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + zoomOutFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + maximumZoomFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + zoomGraphPadding : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + scrollIncrementZoom : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + arrangeCircleRadiusMultiplier : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + arrangeGridSpacing : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + autoArrangeAttractiveForce : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + autoArrangeRepulsiveForce : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + autoArrangeDecelerationFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + arrangeContractFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + arrangeExpandFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + undoLoggingInterval : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + undoLoggingMaximum : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + useAntiAliasing : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + usePureStroke : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + useBicubicInterpolation : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + useFractionalMetrics : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + vertexWeightPrecision : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeWeightPrecision : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + mainWindowWidth : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + mainWindowHeight : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + scriptLibraryWindowWidth : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + scriptLibraryWindowHeight : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + graphWindowWidth : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + graphWindowHeight : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + cascadeWindowOffset : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + language : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultGraphName : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + directedEdgeArrowRatio : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + arrowKeyIncrement : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeSnapMarginRatio : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + areCloseDistance : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + paintToolMenuDelay : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - UserSettings() </td></tr>
<tr><td align="left" balign="left"> + getVertexColor(i : int) : java.awt.Color </td></tr>
<tr><td align="left" balign="left"> + getEdgeColor(i : int) : java.awt.Color </td></tr>
<tr><td align="left" balign="left"> + fromFile(file : java.io.File) </td></tr>
<tr><td align="left" balign="left"> + fromString(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
		</table></td></tr>
		</table>>, URL="../../settings/UserSettings.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.GeometryUtilities
	c3591 [label=<<table title="pfc.utilities.GeometryUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../GeometryUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GeometryUtilities </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GeometryUtilities() </td></tr>
<tr><td align="left" balign="left"> + angle(x : double, y : double) : double </td></tr>
<tr><td align="left" balign="left"> + angleBetween(angle0 : double, angle1 : double) : double </td></tr>
<tr><td align="left" balign="left"> + areClose(point : java.awt.geom.Point2D, line : java.awt.geom.Line2D) : boolean </td></tr>
<tr><td align="left" balign="left"> + determinant(A : double[][]) : double </td></tr>
<tr><td align="left" balign="left"> + distance(v0 : pfc.models.Vertex, v1 : pfc.models.Vertex) : double </td></tr>
<tr><td align="left" balign="left"> + distanceSq(v0 : pfc.models.Vertex, v1 : pfc.models.Vertex) : double </td></tr>
<tr><td align="left" balign="left"> + getBounds(graph : pfc.models.Graph) : java.awt.geom.Rectangle2D </td></tr>
<tr><td align="left" balign="left"> + getCrossings(arc0 : java.awt.geom.Arc2D, arc0Center : java.awt.geom.Point2D, arc1 : java.awt.geom.Arc2D, arc1Center : java.awt.geom.Point2D) : java.util.Vector&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getCrossings(line : java.awt.geom.Line2D, arc : java.awt.geom.Arc2D, arcCenter : java.awt.geom.Point2D) : java.util.Vector&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getCrossings(line0 : java.awt.geom.Line2D, line1 : java.awt.geom.Line2D) : java.util.Vector&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + isBetween(a : java.awt.geom.Point2D, b : java.awt.geom.Point2D, c : java.awt.geom.Point2D) : boolean </td></tr>
<tr><td align="left" balign="left"> + midpoint(x0 : double, y0 : double, x1 : double, y1 : double) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + midpoint(v0 : pfc.models.Vertex, v1 : pfc.models.Vertex) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + threeOutOfFourPoint(x0 : double, y0 : double, x1 : double, y1 : double) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + threeOutOfFourPoint(v0 : pfc.models.Vertex, v1 : pfc.models.Vertex) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + slope(x0 : double, y0 : double, x1 : double, y1 : double) : double </td></tr>
<tr><td align="left" balign="left"> + slope(line : java.awt.geom.Line2D) : double </td></tr>
<tr><td align="left" balign="left"> + getClockwiseAngle(p1 : java.awt.geom.Point2D, p2 : java.awt.geom.Point2D, p3 : java.awt.geom.Point2D) : double </td></tr>
<tr><td align="left" balign="left"> + getAngle(p1 : java.awt.geom.Point2D, p2 : java.awt.geom.Point2D, p3 : java.awt.geom.Point2D, p4 : java.awt.geom.Point2D) : double </td></tr>
<tr><td align="left" balign="left"> + getTheClosestVertexToOrigin(graph : pfc.models.Graph) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + isCloserToOrigin(v1 : pfc.models.Vertex, v2 : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getTheFarthestVertexToOrigin(graph : pfc.models.Graph) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + calculateSignedPolygonArea(polygon : java.util.List&lt;java.awt.geom.Point2D&gt;) : double </td></tr>
<tr><td align="left" balign="left"> + getPolygonCentroid(polygon : java.util.List&lt;java.awt.geom.Point2D&gt;) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="../GeometryUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm
	c3602 [label=<<table title="pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./BipolarOrientationPapamanthouAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BipolarOrientationPapamanthouAlgorithm </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - graph : Graph </td></tr>
<tr><td align="left" balign="left"> - directed : Graph </td></tr>
<tr><td align="left" balign="left"> - source : Vertex </td></tr>
<tr><td align="left" balign="left"> - target : Vertex </td></tr>
<tr><td align="left" balign="left"> - counter : Integer </td></tr>
<tr><td align="left" balign="left"> - n : int </td></tr>
<tr><td align="left" balign="left"> - setQ : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - timestamp : Map&lt;Vertex, Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - stNumbering : Map&lt;Vertex, Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - leafBlocks : Map&lt;Vertex, Set&lt;Vertex&gt;&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BipolarOrientationPapamanthouAlgorithm(graph : Graph) </td></tr>
<tr><td align="left" balign="left"> + orientPlanarGraph() : Graph </td></tr>
<tr><td align="left" balign="left"> - stOrientationRecursive(v : Vertex) </td></tr>
<tr><td align="left" balign="left"> - chooseNextSource(nextSources : Set&lt;Vertex&gt;) : Vertex </td></tr>
<tr><td align="left" balign="left"> - updateBlocksCutPointsTree() </td></tr>
		</table></td></tr>
		</table>>, URL="./BipolarOrientationPapamanthouAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Graph NAVASSOC pfc.models.Vertex
	c3543:p -> c3539:p [taillabel="", label="", headlabel="*\n-vertices", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Graph NAVASSOC pfc.models.Edge
	c3543:p -> c3544:p [taillabel="", label="", headlabel="*\n-edges", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c3544:p -> c3539:p [taillabel="", label="", headlabel="*\n-to", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c3544:p -> c3539:p [taillabel="", label="", headlabel="*\n-from", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm NAVASSOC pfc.models.Graph
	c3602:p -> c3543:p [taillabel="", label="", headlabel="1\n-graph", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm NAVASSOC pfc.models.Graph
	c3602:p -> c3543:p [taillabel="", label="", headlabel="1\n-directed", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm NAVASSOC pfc.models.Vertex
	c3602:p -> c3539:p [taillabel="", label="", headlabel="1\n-source", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm NAVASSOC pfc.models.Vertex
	c3602:p -> c3539:p [taillabel="", label="", headlabel="1\n-target", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm DEPEND pfc.models.Edge
	c3602:p -> c3544:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm DEPEND pfc.utilities.GeometryUtilities
	c3602:p -> c3591:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm DEPEND pfc.settings.UserSettings
	c3602:p -> c3580:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

