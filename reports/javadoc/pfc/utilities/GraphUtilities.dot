#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c10125 [label=<<table title="pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../models/algorithms/constrainedvisrep/ConstrainedVisRepAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.constrainedvisrep </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - stDualG : pfc.models.algorithms.DualPathGraph </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ConstrainedVisRepAlgorithm(stGraphG : pfc.models.Graph, paths : pfc.models.algorithms.NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + getStDualG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getStGraphG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingY() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingX() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + numberY(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + numberX(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + getPathFace(path : pfc.models.algorithms.DirectedPath) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getNumberXPaths(v : pfc.models.Vertex) : java.util.List&lt;java.lang.Integer&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="../models/algorithms/constrainedvisrep/ConstrainedVisRepAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm
	c10128 [label=<<table title="pfc.models.algorithms.orthogonal.OrthogonalAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../models/algorithms/orthogonal/OrthogonalAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrthogonalAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.orthogonal </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - orthogonal : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - digraph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - pathToVertices : java.util.Map&lt;pfc.models.algorithms.DirectedPath, java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.orthogonal.OrthogonalAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + OrthogonalAlgorithm(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getOrthogonal() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getDigraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - orientGraph() </td></tr>
<tr><td align="left" balign="left"> - selectPaths() </td></tr>
<tr><td align="left" balign="left"> - createPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - getLeftmostIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getRightmostOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getNeighborsIn(in : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - getNeighborsOut(out : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - joinPaths(allPaths : java.util.List&lt;pfc.models.algorithms.DirectedPath&gt;, path : pfc.models.algorithms.DirectedPath) </td></tr>
<tr><td align="left" balign="left"> - executeVisibility() </td></tr>
<tr><td align="left" balign="left"> - constructVertices() </td></tr>
<tr><td align="left" balign="left"> - getPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getSTAxeXCoordinate(neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : int </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getAssociatedPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - constructEdges() </td></tr>
<tr><td align="left" balign="left"> - calculateBends(e : pfc.models.Edge, newE : pfc.models.Edge) : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendFromSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendSourcePositioning(s : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendTargetPositioning(t : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - isProblematicSTEdge(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, st : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../models/algorithms/orthogonal/OrthogonalAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm
	c10144 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../models/algorithms/visibilityrepresentation/VisibilityRepresentationAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VisibilityRepresentationAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - stDualG : pfc.models.algorithms.DualGraph </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VisibilityRepresentationAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getStDualG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getStGraphG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingY() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingX() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX() </td></tr>
<tr><td align="left" balign="left"> - numberY(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - numberX(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
		</table></td></tr>
		</table>>, URL="../models/algorithms/visibilityrepresentation/VisibilityRepresentationAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.GraphUtilities
	c10162 [label=<<table title="pfc.utilities.GraphUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./GraphUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GraphUtilities </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GraphUtilities() </td></tr>
<tr><td align="left" balign="left"> + getVerticesDepthFirstSearch(v : Vertex, graph : Graph) : Collection&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesSpanningTree(v : Vertex, graph : Graph) : Collection&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalSorting(v : Vertex, graph : Graph) : Map&lt;Float, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumbering(v : Vertex, graph : Graph) : Map&lt;Vertex, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumbering(v : Vertex, graph : Graph, seed : float, weight : float) : Map&lt;Vertex, Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getDirectedPlanarGraph(graph : Graph) : Graph </td></tr>
<tr><td align="left" balign="left"> + findStronglyConnectedComponents(graph : Graph) : Collection&lt;Collection&lt;Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + findWeaklyConnectedComponents(graph : Graph) : Collection&lt;Collection&lt;Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + findBiconnectedComponents(graph : Graph) : Set&lt;Set&lt;Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + findBiconnectedCutPoints(graph : Graph) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + isBiconnected(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isSTGraph(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + areSTOnOuterFace(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isReducedDigraph(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isTransitiveEdge(graph : Graph, e : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + isPlanarEmbedding(graph : Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMaximumDegree(g : Graph) : int </td></tr>
<tr><td align="left" balign="left"> + getMaximumDegree(g : Graph, selected : List&lt;Vertex&gt;) : int </td></tr>
<tr><td align="left" balign="left"> + getDistanceMatrix(graph : Graph, weighted : boolean) : double[][] </td></tr>
		</table></td></tr>
		</table>>, URL="./GraphUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.WeaklyConnectedComponentsFinder
	c10165 [label=<<table title="pfc.utilities.graph.WeaklyConnectedComponentsFinder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./graph/WeaklyConnectedComponentsFinder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> WeaklyConnectedComponentsFinder </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - random : java.util.Random </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + WeaklyConnectedComponentsFinder() </td></tr>
<tr><td align="left" balign="left"> + find(graph : pfc.models.Graph) : java.util.Collection&lt;java.util.Collection&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - findParent(node : pfc.utilities.graph.WeaklyConnectedComponentsFinder.Node) : pfc.utilities.graph.WeaklyConnectedComponentsFinder.Node </td></tr>
<tr><td align="left" balign="left"> - unionSets(a : pfc.utilities.graph.WeaklyConnectedComponentsFinder.Node, b : pfc.utilities.graph.WeaklyConnectedComponentsFinder.Node) </td></tr>
		</table></td></tr>
		</table>>, URL="./graph/WeaklyConnectedComponentsFinder.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.StronglyConnectedComponentsFinder
	c10167 [label=<<table title="pfc.utilities.graph.StronglyConnectedComponentsFinder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./graph/StronglyConnectedComponentsFinder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StronglyConnectedComponentsFinder </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - index : int </td></tr>
<tr><td align="left" balign="left"> - stack : java.util.Stack&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - indices : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - lowLinks : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - isOnStack : java.util.Map&lt;pfc.models.Vertex, java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> - components : java.util.Collection&lt;java.util.Collection&lt;pfc.models.Vertex&gt;&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + StronglyConnectedComponentsFinder() </td></tr>
<tr><td align="left" balign="left"> + find(graph : pfc.models.Graph) : java.util.Collection&lt;java.util.Collection&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - tarjansAlgorithm(from : pfc.models.Vertex, graph : pfc.models.Graph) </td></tr>
		</table></td></tr>
		</table>>, URL="./graph/StronglyConnectedComponentsFinder.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.RoyFloydWarshallDistancesAlgorithm
	c10168 [label=<<table title="pfc.utilities.graph.RoyFloydWarshallDistancesAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./graph/RoyFloydWarshallDistancesAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RoyFloydWarshallDistancesAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RoyFloydWarshallDistancesAlgorithm() </td></tr>
<tr><td align="left" balign="left"> + getDistanceMatrix(graph : pfc.models.Graph, weighted : boolean) : double[][] </td></tr>
		</table></td></tr>
		</table>>, URL="./graph/RoyFloydWarshallDistancesAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.PlanarEmbeddingTester
	c10169 [label=<<table title="pfc.utilities.graph.PlanarEmbeddingTester" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./graph/PlanarEmbeddingTester.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PlanarEmbeddingTester </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + PlanarEmbeddingTester() </td></tr>
<tr><td align="left" balign="left"> + isPlanarEmbedding(graph : pfc.models.Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + keepPlanarEmbeddingEdge(graph : pfc.models.Graph, e1 : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> - areCrossed(e1 : pfc.models.Edge, e2 : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> - getNumberOfCrossings(e1 : pfc.models.Edge, e2 : pfc.models.Edge) : int </td></tr>
		</table></td></tr>
		</table>>, URL="./graph/PlanarEmbeddingTester.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.DepthFirstSearchFinder
	c10171 [label=<<table title="pfc.utilities.graph.DepthFirstSearchFinder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./graph/DepthFirstSearchFinder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DepthFirstSearchFinder </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - verticesExplored : java.util.Collection&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - edgesExplored : java.util.Collection&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalSorting : java.util.Map&lt;java.lang.Float, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumbering : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - order : java.lang.Float </td></tr>
<tr><td align="left" balign="left"> - seed : java.lang.Float </td></tr>
<tr><td align="left" balign="left"> - weight : java.lang.Float </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DepthFirstSearchFinder() </td></tr>
<tr><td align="left" balign="left"> + DepthFirstSearchFinder(seed : float, weight : float) </td></tr>
<tr><td align="left" balign="left"> + depthFirstSearch(v : pfc.models.Vertex, graph : pfc.models.Graph) : java.util.Collection&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + spanningTree(v : pfc.models.Vertex, graph : pfc.models.Graph) : java.util.Collection&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + topologicalSorting(v : pfc.models.Vertex, graph : pfc.models.Graph) : java.util.Map&lt;java.lang.Float, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + topologicalNumbering(v : pfc.models.Vertex, graph : pfc.models.Graph) : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - depthFirstSearchAlgorithm(v : pfc.models.Vertex, graph : pfc.models.Graph) </td></tr>
		</table></td></tr>
		</table>>, URL="./graph/DepthFirstSearchFinder.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.DegreeCounter
	c10172 [label=<<table title="pfc.utilities.graph.DegreeCounter" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./graph/DegreeCounter.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DegreeCounter </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DegreeCounter() </td></tr>
<tr><td align="left" balign="left"> + getMaximumDegree(g : pfc.models.Graph) : int </td></tr>
<tr><td align="left" balign="left"> + getMaximumDegree(g : pfc.models.Graph, selectedVertices : java.util.List&lt;pfc.models.Vertex&gt;) : int </td></tr>
		</table></td></tr>
		</table>>, URL="./graph/DegreeCounter.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.BiconnectedComponentsFinder
	c10175 [label=<<table title="pfc.utilities.graph.BiconnectedComponentsFinder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./graph/BiconnectedComponentsFinder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BiconnectedComponentsFinder </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - dfs_num : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - high : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - parents : java.util.Map&lt;pfc.models.Vertex, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - bicomponents : java.util.Set&lt;java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - cut_points : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - stack : java.util.Stack&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> - converse_depth : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BiconnectedComponentsFinder() </td></tr>
<tr><td align="left" balign="left"> + isBiconnected(graph : pfc.models.Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + getCutPoints(graph : pfc.models.Graph) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getBiconnectedComponents(graph : pfc.models.Graph) : java.util.Set&lt;java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + find(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> - findBiconnectedComponents(graph : pfc.models.Graph, v : pfc.models.Vertex, bicomponents : java.util.Set&lt;java.util.Set&lt;pfc.models.Vertex&gt;&gt;) </td></tr>
		</table></td></tr>
		</table>>, URL="./graph/BiconnectedComponentsFinder.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm DEPEND pfc.utilities.GraphUtilities
	c10125:p -> c10162:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm NAVASSOC pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c10128:p -> c10125:p [taillabel="", label="", headlabel="-visibility", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.utilities.GraphUtilities
	c10128:p -> c10162:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm DEPEND pfc.utilities.GraphUtilities
	c10144:p -> c10162:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.GraphUtilities DEPEND pfc.utilities.graph.DepthFirstSearchFinder
	c10162:p -> c10171:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.GraphUtilities DEPEND BipolarOrientation
	c10162:p -> c10191:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.GraphUtilities DEPEND pfc.utilities.graph.StronglyConnectedComponentsFinder
	c10162:p -> c10167:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.GraphUtilities DEPEND pfc.utilities.graph.WeaklyConnectedComponentsFinder
	c10162:p -> c10165:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.GraphUtilities DEPEND pfc.utilities.graph.BiconnectedComponentsFinder
	c10162:p -> c10175:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.GraphUtilities DEPEND STGraphTester
	c10162:p -> c10192:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.GraphUtilities DEPEND pfc.utilities.graph.PlanarEmbeddingTester
	c10162:p -> c10169:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.GraphUtilities DEPEND pfc.utilities.graph.DegreeCounter
	c10162:p -> c10172:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.GraphUtilities DEPEND pfc.utilities.graph.RoyFloydWarshallDistancesAlgorithm
	c10162:p -> c10168:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// BipolarOrientation
	c10191[label=<<table title="BipolarOrientation" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BipolarOrientation </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=9.0];
	// STGraphTester
	c10192[label=<<table title="STGraphTester" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> STGraphTester </td></tr>
		</table></td></tr>
		</table>>, fontname="arial", fontcolor="black", fontsize=9.0];
}

