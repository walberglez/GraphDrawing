#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.algorithms.DualPathGraph
	c7888 [label=<<table title="pfc.models.algorithms.DualPathGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../models/algorithms/DualPathGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DualPathGraph </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - pathsPI : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - vertexS : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - vertexT : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - faceS : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - faceT : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - leftEdgesFaces : java.util.Map&lt;pfc.models.Edge, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightEdgesFaces : java.util.Map&lt;pfc.models.Edge, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rotations : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - pathsFaces : java.util.Map&lt;pfc.models.algorithms.DirectedPath, pfc.models.Vertex&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DualPathGraph(stGraph : pfc.models.Graph, paths : pfc.models.algorithms.NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + left(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + right(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + orig(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + dest(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getPathFace(p : pfc.models.algorithms.DirectedPath) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexS() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexT() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceS() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceT() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - setVertexS() </td></tr>
<tr><td align="left" balign="left"> - setVertexT() </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - constructRotations() </td></tr>
<tr><td align="left" balign="left"> - getAllNeighbors(v : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + constructDualPathGraph() </td></tr>
<tr><td align="left" balign="left"> - coverAllEdges() </td></tr>
<tr><td align="left" balign="left"> - addSingleEdgePath(e : pfc.models.Edge) </td></tr>
<tr><td align="left" balign="left"> - setOuterFaces() </td></tr>
<tr><td align="left" balign="left"> - determineOuterEdges() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFaces() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFace(e : pfc.models.Edge) </td></tr>
<tr><td align="left" balign="left"> - setInnerFace(polygon : java.util.List&lt;java.awt.geom.Point2D&gt;, face : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - setPathFaces() </td></tr>
<tr><td align="left" balign="left"> - setDualPathEdges() </td></tr>
		</table></td></tr>
		</table>>, URL="../models/algorithms/DualPathGraph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.DualGraph
	c7889 [label=<<table title="pfc.models.algorithms.DualGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../models/algorithms/DualGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DualGraph </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - vertexS : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - vertexT : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - faceS : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - faceT : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - leftVerticesFaces : java.util.Map&lt;pfc.models.Vertex, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightVerticesFaces : java.util.Map&lt;pfc.models.Vertex, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - leftEdgesFaces : java.util.Map&lt;pfc.models.Edge, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightEdgesFaces : java.util.Map&lt;pfc.models.Edge, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rotations : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DualGraph(stGraph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + left(v : pfc.models.Vertex) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + right(v : pfc.models.Vertex) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + left(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + right(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + orig(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + dest(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexS() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexT() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceS() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceT() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - constructRotations() </td></tr>
<tr><td align="left" balign="left"> + constructDualGraph() </td></tr>
<tr><td align="left" balign="left"> - setOuterFaces() </td></tr>
<tr><td align="left" balign="left"> - determineOuterEdges() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFaces() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFace(e : pfc.models.Edge) </td></tr>
<tr><td align="left" balign="left"> - setInnerFace(polygon : java.util.List&lt;java.awt.geom.Point2D&gt;, face : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - setDualEdges() </td></tr>
<tr><td align="left" balign="left"> - setLeftRightVerticesFaces() </td></tr>
		</table></td></tr>
		</table>>, URL="../models/algorithms/DualGraph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.GeometryUtilities
	c7931 [label=<<table title="pfc.utilities.GeometryUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./GeometryUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GeometryUtilities </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GeometryUtilities() </td></tr>
<tr><td align="left" balign="left"> + angle(x : double, y : double) : double </td></tr>
<tr><td align="left" balign="left"> + angleBetween(angle0 : double, angle1 : double) : double </td></tr>
<tr><td align="left" balign="left"> + areClose(point : Point2D, line : Line2D) : boolean </td></tr>
<tr><td align="left" balign="left"> + determinant(A : double[][]) : double </td></tr>
<tr><td align="left" balign="left"> + distance(v0 : Vertex, v1 : Vertex) : double </td></tr>
<tr><td align="left" balign="left"> + distanceSq(v0 : Vertex, v1 : Vertex) : double </td></tr>
<tr><td align="left" balign="left"> + getBounds(graph : Graph) : Rectangle2D </td></tr>
<tr><td align="left" balign="left"> + getCrossings(arc0 : Arc2D, arc0Center : Point2D, arc1 : Arc2D, arc1Center : Point2D) : Vector&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getCrossings(line : Line2D, arc : Arc2D, arcCenter : Point2D) : Vector&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getCrossings(line0 : Line2D, line1 : Line2D) : Vector&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + isBetween(a : Point2D, b : Point2D, c : Point2D) : boolean </td></tr>
<tr><td align="left" balign="left"> + midpoint(x0 : double, y0 : double, x1 : double, y1 : double) : Point2D </td></tr>
<tr><td align="left" balign="left"> + midpoint(v0 : Vertex, v1 : Vertex) : Point2D </td></tr>
<tr><td align="left" balign="left"> + threeOutOfFourPoint(x0 : double, y0 : double, x1 : double, y1 : double) : Point2D </td></tr>
<tr><td align="left" balign="left"> + threeOutOfFourPoint(v0 : Vertex, v1 : Vertex) : Point2D </td></tr>
<tr><td align="left" balign="left"> + slope(x0 : double, y0 : double, x1 : double, y1 : double) : double </td></tr>
<tr><td align="left" balign="left"> + slope(line : Line2D) : double </td></tr>
<tr><td align="left" balign="left"> + getClockwiseAngle(p1 : Point2D, p2 : Point2D, p3 : Point2D) : double </td></tr>
<tr><td align="left" balign="left"> + getAngle(p1 : Point2D, p2 : Point2D, p3 : Point2D, p4 : Point2D) : double </td></tr>
<tr><td align="left" balign="left"> + getTheClosestVertexToOrigin(graph : Graph) : Vertex </td></tr>
<tr><td align="left" balign="left"> + isCloserToOrigin(v1 : Vertex, v2 : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getTheFarthestVertexToOrigin(graph : Graph) : Vertex </td></tr>
<tr><td align="left" balign="left"> + calculateSignedPolygonArea(polygon : List&lt;Point2D&gt;) : double </td></tr>
<tr><td align="left" balign="left"> + getPolygonCentroid(polygon : List&lt;Point2D&gt;) : Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="./GeometryUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.PlanarEmbeddingTester
	c7937 [label=<<table title="pfc.utilities.graph.PlanarEmbeddingTester" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./graph/PlanarEmbeddingTester.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PlanarEmbeddingTester </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + PlanarEmbeddingTester() </td></tr>
<tr><td align="left" balign="left"> + isPlanarEmbedding(graph : pfc.models.Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + keepPlanarEmbeddingEdge(graph : pfc.models.Graph, e1 : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> - areCrossed(e1 : pfc.models.Edge, e2 : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> - getNumberOfCrossings(e1 : pfc.models.Edge, e2 : pfc.models.Edge) : int </td></tr>
		</table></td></tr>
		</table>>, URL="./graph/PlanarEmbeddingTester.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.BipolarOrientationTarjanAlgorithm
	c7941 [label=<<table title="pfc.utilities.graph.BipolarOrientationTarjanAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./graph/BipolarOrientationTarjanAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BipolarOrientationTarjanAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - graph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - directed : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - source : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - target : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - pre_dfs_num : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - low : java.util.Map&lt;pfc.models.Vertex, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - parents : java.util.Map&lt;pfc.models.Vertex, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - sign : java.util.Map&lt;pfc.models.Vertex, java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> - listL : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - preorder : java.util.Deque&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - current : int </td></tr>
<tr><td align="left" balign="left"> - plus : boolean </td></tr>
<tr><td align="left" balign="left"> - minus : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BipolarOrientationTarjanAlgorithm(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + orientPlanarGraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - dfs(v : pfc.models.Vertex) </td></tr>
		</table></td></tr>
		</table>>, URL="./graph/BipolarOrientationTarjanAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm
	c7942 [label=<<table title="pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./graph/BipolarOrientationPapamanthouAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BipolarOrientationPapamanthouAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - graph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - directed : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - source : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - target : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - counter : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - n : int </td></tr>
<tr><td align="left" balign="left"> - setQ : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - timestamp : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - stNumbering : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - leafBlocks : java.util.Map&lt;pfc.models.Vertex, java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BipolarOrientationPapamanthouAlgorithm(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + orientPlanarGraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - stOrientationRecursive(v : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - chooseNextSource(nextSources : java.util.Set&lt;pfc.models.Vertex&gt;) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - updateBlocksCutPointsTree() </td></tr>
		</table></td></tr>
		</table>>, URL="./graph/BipolarOrientationPapamanthouAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.DualPathGraph DEPEND pfc.utilities.GeometryUtilities
	c7888:p -> c7931:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.DualGraph DEPEND pfc.utilities.GeometryUtilities
	c7889:p -> c7931:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.PlanarEmbeddingTester DEPEND pfc.utilities.GeometryUtilities
	c7937:p -> c7931:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.BipolarOrientationTarjanAlgorithm DEPEND pfc.utilities.GeometryUtilities
	c7941:p -> c7931:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm DEPEND pfc.utilities.GeometryUtilities
	c7942:p -> c7931:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

