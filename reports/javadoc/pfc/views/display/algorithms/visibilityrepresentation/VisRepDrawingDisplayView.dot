#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm
	c17070 [label=<<table title="pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../../../models/algorithms/constrainedpolyline/ConstrainedPolylineAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConstrainedPolylineAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.constrainedpolyline </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - polyline : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ConstrainedPolylineAlgorithm(stGraphG : pfc.models.Graph, paths : pfc.models.algorithms.NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getPolyline() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getLongEdgePositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getMedianPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, path : pfc.models.algorithms.DirectedPath) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="../../../../models/algorithms/constrainedpolyline/ConstrainedPolylineAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm
	c17075 [label=<<table title="pfc.models.algorithms.orthogonal.OrthogonalAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../../../models/algorithms/orthogonal/OrthogonalAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrthogonalAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.orthogonal </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - orthogonal : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - digraph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - pathToVertices : java.util.Map&lt;pfc.models.algorithms.DirectedPath, java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.orthogonal.OrthogonalAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + OrthogonalAlgorithm(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getOrthogonal() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getDigraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - orientGraph() </td></tr>
<tr><td align="left" balign="left"> - selectPaths() </td></tr>
<tr><td align="left" balign="left"> - createPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - getLeftmostIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getRightmostOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getNeighborsIn(in : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - getNeighborsOut(out : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - joinPaths(allPaths : java.util.List&lt;pfc.models.algorithms.DirectedPath&gt;, path : pfc.models.algorithms.DirectedPath) </td></tr>
<tr><td align="left" balign="left"> - executeVisibility() </td></tr>
<tr><td align="left" balign="left"> - constructVertices() </td></tr>
<tr><td align="left" balign="left"> - getPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getSTAxeXCoordinate(neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : int </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getAssociatedPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - constructEdges() </td></tr>
<tr><td align="left" balign="left"> - calculateBends(e : pfc.models.Edge, newE : pfc.models.Edge) : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendFromSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendSourcePositioning(s : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendTargetPositioning(t : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - isProblematicSTEdge(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, st : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../../../models/algorithms/orthogonal/OrthogonalAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm
	c17078 [label=<<table title="pfc.models.algorithms.polyline.UpwardPolylineAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../../../models/algorithms/polyline/UpwardPolylineAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UpwardPolylineAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.polyline </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm </td></tr>
<tr><td align="left" balign="left"> - polyline : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.polyline.UpwardPolylineAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UpwardPolylineAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getPolyline() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - getLongEdgePositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getMedianPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="../../../../models/algorithms/polyline/UpwardPolylineAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.views.display.algorithms.visibilityrepresentation.VisRepDrawingDisplayView
	c17132 [label=<<table title="pfc.views.display.algorithms.visibilityrepresentation.VisRepDrawingDisplayView" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./VisRepDrawingDisplayView.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VisRepDrawingDisplayView </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VisRepDrawingDisplayView() </td></tr>
<tr><td align="left" balign="left"> + paintDrawing(g2D : Graphics2D, drawing : VisibilityRepresentationDrawing) </td></tr>
<tr><td align="left" balign="left"> + paintDrawingBackground(g2D : Graphics2D, drawing : VisibilityRepresentationDrawing) </td></tr>
<tr><td align="left" balign="left"> + paintDrawingBackgroundWithoutAxes(g2D : Graphics2D, drawing : VisibilityRepresentationDrawing) </td></tr>
<tr><td align="left" balign="left"> - paintBackground(g2D : Graphics2D, pOrigin : Point2D, pDest : Point2D) </td></tr>
<tr><td align="left" balign="left"> + getBounds(drawing : VisibilityRepresentationDrawing) : Rectangle2D </td></tr>
<tr><td align="left" balign="left"> - paintAxeX(g2D : Graphics2D, drawing : VisibilityRepresentationDrawing) </td></tr>
<tr><td align="left" balign="left"> - paintAxeY(g2D : Graphics2D, drawing : VisibilityRepresentationDrawing) </td></tr>
<tr><td align="left" balign="left"> + getVertexSegmentPoint(vS : VertexSegment, firstX : double, firstY : double) : Point2D </td></tr>
<tr><td align="left" balign="left"> + getEdgeSegmentLine(eS : EdgeSegment, firstX : double, firstY : double) : Line2D </td></tr>
<tr><td align="left" balign="left"> + getCoordinatePoint(x : int, y : int, drawing : VisibilityRepresentationDrawing) : Point2D </td></tr>
<tr><td align="left" balign="left"> + getCoordinatePoint(x : int, y : int, firstX : double, firstY : double) : Point2D </td></tr>
<tr><td align="left" balign="left"> + getFirstX() : double </td></tr>
<tr><td align="left" balign="left"> + getFirstY(drawing : VisibilityRepresentationDrawing) : double </td></tr>
<tr><td align="left" balign="left"> - getAxeYTopPoint() : Point2D </td></tr>
<tr><td align="left" balign="left"> - getAxeYBottomPoint(drawing : VisibilityRepresentationDrawing) : Point2D </td></tr>
<tr><td align="left" balign="left"> - getAxeXLeftPoint(drawing : VisibilityRepresentationDrawing) : Point2D </td></tr>
<tr><td align="left" balign="left"> - getAxeXRightPoint(drawing : VisibilityRepresentationDrawing) : Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="./VisRepDrawingDisplayView.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.views.display.algorithms.visibilityrepresentation.VisRepDrawingDisplayView
	c17070:p -> c17132:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.views.display.algorithms.visibilityrepresentation.VisRepDrawingDisplayView
	c17075:p -> c17132:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.views.display.algorithms.visibilityrepresentation.VisRepDrawingDisplayView
	c17078:p -> c17132:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

