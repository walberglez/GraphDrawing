#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.algorithms.RotationComparator
	c1042 [label=<<table title="pfc.models.algorithms.RotationComparator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RotationComparator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RotationComparator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - center : Vertex </td></tr>
<tr><td align="left" balign="left"> - reference : Vertex </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RotationComparator(center : Vertex, reference : Vertex) </td></tr>
<tr><td align="left" balign="left"> + compare(v1 : Vertex, v2 : Vertex) : int </td></tr>
<tr><td align="left" balign="left"> + getCenter() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getReference() : Vertex </td></tr>
		</table></td></tr>
		</table>>, URL="./RotationComparator.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.Rotation
	c1043 [label=<<table title="pfc.models.algorithms.Rotation" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Rotation.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Rotation </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Rotation(center : Vertex) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : Vertex, reference : Vertex) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : Vertex, neighbors : Set&lt;Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : Vertex, reference : Vertex, neighbors : Set&lt;Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : Vertex, neighbors : Set&lt;Vertex&gt;, reference : boolean) </td></tr>
<tr><td align="left" balign="left"> - determineReference(center : Vertex, neighbors : Set&lt;Vertex&gt;) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getClockwiseVertex(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getCounterClockwiseVertex(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + higher(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + lower(v : Vertex) : Vertex </td></tr>
		</table></td></tr>
		</table>>, URL="./Rotation.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.NonIntersectingPathList
	c1044 [label=<<table title="pfc.models.algorithms.NonIntersectingPathList" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./NonIntersectingPathList.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NonIntersectingPathList </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + NonIntersectingPathList() </td></tr>
<tr><td align="left" balign="left"> + add(vertices : List&lt;Vertex&gt;, edges : List&lt;Edge&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + areVertexDisjoint() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsEdge(e : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsVertex(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getAll(v : Vertex) : Set&lt;DirectedPath&gt; </td></tr>
<tr><td align="left" balign="left"> + getLongestPath(v : Vertex) : DirectedPath </td></tr>
<tr><td align="left" balign="left"> + get(e : Edge) : DirectedPath </td></tr>
<tr><td align="left" balign="left"> + removeVertex(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(e : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeAllVertices(vertices : List&lt;Vertex&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeAllEdges(edges : List&lt;Edge&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + setSelected(selected : boolean) </td></tr>
<tr><td align="left" balign="left"> - isPathNonIntersecting(path : DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> - areNonIntersectingPaths(path1 : DirectedPath, path2 : DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> - areVertexDisjointPaths(path1 : DirectedPath, path2 : DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> - areCrossedAtCommonVertex(path1 : DirectedPath, path2 : DirectedPath, v : Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./NonIntersectingPathList.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.DualPathGraph
	c1045 [label=<<table title="pfc.models.algorithms.DualPathGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DualPathGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DualPathGraph </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : Graph </td></tr>
<tr><td align="left" balign="left"> - pathsPI : NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - vertexS : Vertex </td></tr>
<tr><td align="left" balign="left"> - vertexT : Vertex </td></tr>
<tr><td align="left" balign="left"> - faceS : Vertex </td></tr>
<tr><td align="left" balign="left"> - faceT : Vertex </td></tr>
<tr><td align="left" balign="left"> - leftEdgesFaces : Map&lt;Edge, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightEdgesFaces : Map&lt;Edge, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rotations : Map&lt;Vertex, Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - pathsFaces : Map&lt;DirectedPath, Vertex&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DualPathGraph(stGraph : Graph, paths : NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + left(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + right(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + orig(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + dest(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getPathFace(p : DirectedPath) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexS() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexT() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceS() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceT() : Vertex </td></tr>
<tr><td align="left" balign="left"> - setVertexS() </td></tr>
<tr><td align="left" balign="left"> - setVertexT() </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - constructRotations() </td></tr>
<tr><td align="left" balign="left"> - getAllNeighbors(v : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + constructDualPathGraph() </td></tr>
<tr><td align="left" balign="left"> - coverAllEdges() </td></tr>
<tr><td align="left" balign="left"> - addSingleEdgePath(e : Edge) </td></tr>
<tr><td align="left" balign="left"> - setOuterFaces() </td></tr>
<tr><td align="left" balign="left"> - determineOuterEdges() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFaces() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFace(e : Edge) </td></tr>
<tr><td align="left" balign="left"> - setInnerFace(polygon : List&lt;Point2D&gt;, face : Vertex) </td></tr>
<tr><td align="left" balign="left"> - setPathFaces() </td></tr>
<tr><td align="left" balign="left"> - setDualPathEdges() </td></tr>
		</table></td></tr>
		</table>>, URL="./DualPathGraph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.DualGraph
	c1046 [label=<<table title="pfc.models.algorithms.DualGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DualGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DualGraph </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : Graph </td></tr>
<tr><td align="left" balign="left"> - vertexS : Vertex </td></tr>
<tr><td align="left" balign="left"> - vertexT : Vertex </td></tr>
<tr><td align="left" balign="left"> - faceS : Vertex </td></tr>
<tr><td align="left" balign="left"> - faceT : Vertex </td></tr>
<tr><td align="left" balign="left"> - leftVerticesFaces : Map&lt;Vertex, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightVerticesFaces : Map&lt;Vertex, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - leftEdgesFaces : Map&lt;Edge, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightEdgesFaces : Map&lt;Edge, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rotations : Map&lt;Vertex, Rotation&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DualGraph(stGraph : Graph) </td></tr>
<tr><td align="left" balign="left"> + left(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + right(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + left(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + right(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + orig(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + dest(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexS() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexT() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceS() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceT() : Vertex </td></tr>
<tr><td align="left" balign="left"> - constructRotations() </td></tr>
<tr><td align="left" balign="left"> + constructDualGraph() </td></tr>
<tr><td align="left" balign="left"> - setOuterFaces() </td></tr>
<tr><td align="left" balign="left"> - determineOuterEdges() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFaces() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFace(e : Edge) </td></tr>
<tr><td align="left" balign="left"> - setInnerFace(polygon : List&lt;Point2D&gt;, face : Vertex) </td></tr>
<tr><td align="left" balign="left"> - setDualEdges() </td></tr>
<tr><td align="left" balign="left"> - setLeftRightVerticesFaces() </td></tr>
		</table></td></tr>
		</table>>, URL="./DualGraph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.DirectedPath
	c1047 [label=<<table title="pfc.models.algorithms.DirectedPath" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DirectedPath.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DirectedPath </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertices : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - edges : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> - incidences : Map&lt;Vertex, Set&lt;Edge&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - start : Vertex </td></tr>
<tr><td align="left" balign="left"> - end : Vertex </td></tr>
<tr><td align="left" balign="left"> - length : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DirectedPath() </td></tr>
<tr><td align="left" balign="left"> + createPath(vertices : List&lt;Vertex&gt;, edges : List&lt;Edge&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateEdges(edges : List&lt;Edge&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateVertices() : boolean </td></tr>
<tr><td align="left" balign="left"> - traverse() : boolean </td></tr>
<tr><td align="left" balign="left"> + getVertices() : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges() : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getStart() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getEnd() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getLength() : int </td></tr>
<tr><td align="left" balign="left"> + getVertexFrom(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexTo(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getNeighbors(v : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getCentralPoint() : Point2D </td></tr>
<tr><td align="left" balign="left"> - getCentralVertex() : Vertex </td></tr>
<tr><td align="left" balign="left"> - getCentralEdge() : Edge </td></tr>
<tr><td align="left" balign="left"> + isOuterVertex(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsVertex(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsEdge(e : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + getCommonVertices(path : DirectedPath) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + isVertexDisjoint(path : DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> + isEdgeDisjoint(path : DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> + join(path : DirectedPath) </td></tr>
<tr><td align="left" balign="left"> + setSelected(selected : boolean) </td></tr>
		</table></td></tr>
		</table>>, URL="./DirectedPath.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.Rotation DEPEND pfc.models.algorithms.RotationComparator
	c1043:p -> c1042:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.NonIntersectingPathList DEPEND pfc.models.algorithms.Rotation
	c1044:p -> c1043:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.algorithms.NonIntersectingPathList
	c1045:p -> c1044:p [taillabel="", label="", headlabel="-pathsPI", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.algorithms.Rotation
	c1045:p -> c1043:p [taillabel="", label="", headlabel="*\n-rotations", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.algorithms.DirectedPath
	c1045:p -> c1047:p [taillabel="", label="", headlabel="*\n-pathsFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.algorithms.Rotation
	c1046:p -> c1043:p [taillabel="", label="", headlabel="*\n-rotations", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

