#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.Vertex
	c13462 [label=<<table title="pfc.models.Vertex" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Vertex.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Vertex </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + id : pfc.models.ObservableModel.Property&lt;java.util.UUID&gt; </td></tr>
<tr><td align="left" balign="left"> + x : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + y : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + label : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + radius : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + weight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Vertex() </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double, color : int, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Vertex(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Vertex(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getPoint2D() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + isIncident(edge : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : java.lang.Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../Vertex.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.RotationComparator
	c13468 [label=<<table title="pfc.models.algorithms.RotationComparator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RotationComparator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RotationComparator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - center : Vertex </td></tr>
<tr><td align="left" balign="left"> - reference : Vertex </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RotationComparator(center : Vertex, reference : Vertex) </td></tr>
<tr><td align="left" balign="left"> + compare(v1 : Vertex, v2 : Vertex) : int </td></tr>
<tr><td align="left" balign="left"> + getCenter() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getReference() : Vertex </td></tr>
		</table></td></tr>
		</table>>, URL="./RotationComparator.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.Rotation
	c13469 [label=<<table title="pfc.models.algorithms.Rotation" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Rotation.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Rotation </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Rotation(center : Vertex) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : Vertex, reference : Vertex) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : Vertex, neighbors : Set&lt;Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : Vertex, reference : Vertex, neighbors : Set&lt;Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : Vertex, neighbors : Set&lt;Vertex&gt;, reference : boolean) </td></tr>
<tr><td align="left" balign="left"> - determineReference(center : Vertex, neighbors : Set&lt;Vertex&gt;) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getClockwiseVertex(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getCounterClockwiseVertex(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + higher(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + lower(v : Vertex) : Vertex </td></tr>
		</table></td></tr>
		</table>>, URL="./Rotation.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.NonIntersectingPathList
	c13470 [label=<<table title="pfc.models.algorithms.NonIntersectingPathList" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./NonIntersectingPathList.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NonIntersectingPathList </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + NonIntersectingPathList() </td></tr>
<tr><td align="left" balign="left"> + add(vertices : List&lt;Vertex&gt;, edges : List&lt;Edge&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + areVertexDisjoint() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsEdge(e : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsVertex(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getAll(v : Vertex) : Set&lt;DirectedPath&gt; </td></tr>
<tr><td align="left" balign="left"> + getLongestPath(v : Vertex) : DirectedPath </td></tr>
<tr><td align="left" balign="left"> + get(e : Edge) : DirectedPath </td></tr>
<tr><td align="left" balign="left"> + removeVertex(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(e : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeAllVertices(vertices : List&lt;Vertex&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeAllEdges(edges : List&lt;Edge&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + setSelected(selected : boolean) </td></tr>
<tr><td align="left" balign="left"> - isPathNonIntersecting(path : DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> - areNonIntersectingPaths(path1 : DirectedPath, path2 : DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> - areVertexDisjointPaths(path1 : DirectedPath, path2 : DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> - areCrossedAtCommonVertex(path1 : DirectedPath, path2 : DirectedPath, v : Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./NonIntersectingPathList.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.DualPathGraph
	c13471 [label=<<table title="pfc.models.algorithms.DualPathGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DualPathGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DualPathGraph </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : Graph </td></tr>
<tr><td align="left" balign="left"> - pathsPI : NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - vertexS : Vertex </td></tr>
<tr><td align="left" balign="left"> - vertexT : Vertex </td></tr>
<tr><td align="left" balign="left"> - faceS : Vertex </td></tr>
<tr><td align="left" balign="left"> - faceT : Vertex </td></tr>
<tr><td align="left" balign="left"> - leftEdgesFaces : Map&lt;Edge, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightEdgesFaces : Map&lt;Edge, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rotations : Map&lt;Vertex, Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - pathsFaces : Map&lt;DirectedPath, Vertex&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DualPathGraph(stGraph : Graph, paths : NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + left(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + right(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + orig(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + dest(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getPathFace(p : DirectedPath) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexS() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexT() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceS() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceT() : Vertex </td></tr>
<tr><td align="left" balign="left"> - setVertexS() </td></tr>
<tr><td align="left" balign="left"> - setVertexT() </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - constructRotations() </td></tr>
<tr><td align="left" balign="left"> - getAllNeighbors(v : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + constructDualPathGraph() </td></tr>
<tr><td align="left" balign="left"> - coverAllEdges() </td></tr>
<tr><td align="left" balign="left"> - addSingleEdgePath(e : Edge) </td></tr>
<tr><td align="left" balign="left"> - setOuterFaces() </td></tr>
<tr><td align="left" balign="left"> - determineOuterEdges() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFaces() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFace(e : Edge) </td></tr>
<tr><td align="left" balign="left"> - setInnerFace(polygon : List&lt;Point2D&gt;, face : Vertex) </td></tr>
<tr><td align="left" balign="left"> - setPathFaces() </td></tr>
<tr><td align="left" balign="left"> - setDualPathEdges() </td></tr>
		</table></td></tr>
		</table>>, URL="./DualPathGraph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.DualGraph
	c13472 [label=<<table title="pfc.models.algorithms.DualGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./DualGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DualGraph </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : Graph </td></tr>
<tr><td align="left" balign="left"> - vertexS : Vertex </td></tr>
<tr><td align="left" balign="left"> - vertexT : Vertex </td></tr>
<tr><td align="left" balign="left"> - faceS : Vertex </td></tr>
<tr><td align="left" balign="left"> - faceT : Vertex </td></tr>
<tr><td align="left" balign="left"> - leftVerticesFaces : Map&lt;Vertex, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightVerticesFaces : Map&lt;Vertex, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - leftEdgesFaces : Map&lt;Edge, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightEdgesFaces : Map&lt;Edge, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rotations : Map&lt;Vertex, Rotation&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DualGraph(stGraph : Graph) </td></tr>
<tr><td align="left" balign="left"> + left(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + right(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + left(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + right(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + orig(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + dest(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexS() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexT() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceS() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceT() : Vertex </td></tr>
<tr><td align="left" balign="left"> - constructRotations() </td></tr>
<tr><td align="left" balign="left"> + constructDualGraph() </td></tr>
<tr><td align="left" balign="left"> - setOuterFaces() </td></tr>
<tr><td align="left" balign="left"> - determineOuterEdges() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFaces() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFace(e : Edge) </td></tr>
<tr><td align="left" balign="left"> - setInnerFace(polygon : List&lt;Point2D&gt;, face : Vertex) </td></tr>
<tr><td align="left" balign="left"> - setDualEdges() </td></tr>
<tr><td align="left" balign="left"> - setLeftRightVerticesFaces() </td></tr>
		</table></td></tr>
		</table>>, URL="./DualGraph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm
	c13479 [label=<<table title="pfc.models.algorithms.orthogonal.OrthogonalAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./orthogonal/OrthogonalAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrthogonalAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.orthogonal </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - orthogonal : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - digraph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - pathToVertices : java.util.Map&lt;pfc.models.algorithms.DirectedPath, java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.orthogonal.OrthogonalAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + OrthogonalAlgorithm(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getOrthogonal() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getDigraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - orientGraph() </td></tr>
<tr><td align="left" balign="left"> - selectPaths() </td></tr>
<tr><td align="left" balign="left"> - createPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - getLeftmostIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getRightmostOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getNeighborsIn(in : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - getNeighborsOut(out : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - joinPaths(allPaths : java.util.List&lt;pfc.models.algorithms.DirectedPath&gt;, path : pfc.models.algorithms.DirectedPath) </td></tr>
<tr><td align="left" balign="left"> - executeVisibility() </td></tr>
<tr><td align="left" balign="left"> - constructVertices() </td></tr>
<tr><td align="left" balign="left"> - getPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getSTAxeXCoordinate(neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : int </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getAssociatedPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - constructEdges() </td></tr>
<tr><td align="left" balign="left"> - calculateBends(e : pfc.models.Edge, newE : pfc.models.Edge) : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendFromSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendSourcePositioning(s : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendTargetPositioning(t : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - isProblematicSTEdge(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, st : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./orthogonal/OrthogonalAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm
	c13488 [label=<<table title="pfc.models.algorithms.sldominance.SLDominanceAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./sldominance/SLDominanceAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SLDominanceAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.sldominance </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - dominance : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> - rotationsOut : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - rotationsIn : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.sldominance.SLDominanceAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - count : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SLDominanceAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - preprocessGraph() </td></tr>
<tr><td align="left" balign="left"> - nextOut(v : pfc.models.Vertex, n : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - predOut(v : pfc.models.Vertex, n : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - firstOut(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - lastOut(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - firstIn(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - lastIn(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - assignPreliminaryCoordinates() </td></tr>
<tr><td align="left" balign="left"> - labelX(v : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - labelY(v : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinates() </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinatesX() </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinatesY() </td></tr>
<tr><td align="left" balign="left"> - initXCoordinateVertices() : java.util.TreeSet&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - initYCoordinateVertices() : java.util.TreeSet&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - equalsDegreeInOut(u : pfc.models.Vertex, v : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./sldominance/SLDominanceAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.Rotation NAVASSOC pfc.models.Vertex
	c13469:p -> c13462:p [taillabel="", label="", headlabel="*\n", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.Rotation DEPEND pfc.models.algorithms.RotationComparator
	c13469:p -> c13468:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.NonIntersectingPathList DEPEND pfc.models.Vertex
	c13470:p -> c13462:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.NonIntersectingPathList DEPEND pfc.models.algorithms.Rotation
	c13470:p -> c13469:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.algorithms.NonIntersectingPathList
	c13471:p -> c13470:p [taillabel="", label="", headlabel="-pathsPI", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.Vertex
	c13471:p -> c13462:p [taillabel="", label="", headlabel="-vertexS", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.Vertex
	c13471:p -> c13462:p [taillabel="", label="", headlabel="-vertexT", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.Vertex
	c13471:p -> c13462:p [taillabel="", label="", headlabel="-faceS", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.Vertex
	c13471:p -> c13462:p [taillabel="", label="", headlabel="-faceT", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.algorithms.Rotation
	c13471:p -> c13469:p [taillabel="", label="", headlabel="*\n-rotations", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c13472:p -> c13462:p [taillabel="", label="", headlabel="-vertexS", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c13472:p -> c13462:p [taillabel="", label="", headlabel="-vertexT", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c13472:p -> c13462:p [taillabel="", label="", headlabel="-faceS", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c13472:p -> c13462:p [taillabel="", label="", headlabel="-faceT", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c13472:p -> c13462:p [taillabel="", label="", headlabel="*\n-leftVerticesFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c13472:p -> c13462:p [taillabel="", label="", headlabel="*\n-rightVerticesFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.algorithms.Rotation
	c13472:p -> c13469:p [taillabel="", label="", headlabel="*\n-rotations", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm NAVASSOC pfc.models.algorithms.NonIntersectingPathList
	c13479:p -> c13470:p [taillabel="", label="", headlabel="-paths", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.Vertex
	c13479:p -> c13462:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.algorithms.Rotation
	c13479:p -> c13469:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm DEPEND pfc.models.Vertex
	c13488:p -> c13462:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm DEPEND pfc.models.algorithms.Rotation
	c13488:p -> c13469:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

