#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.Vertex
	c12594 [label=<<table title="pfc.models.Vertex" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../Vertex.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Vertex </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + id : pfc.models.ObservableModel.Property&lt;java.util.UUID&gt; </td></tr>
<tr><td align="left" balign="left"> + x : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + y : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + label : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + radius : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + weight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Vertex() </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double, color : int, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Vertex(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Vertex(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getPoint2D() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + isIncident(edge : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : java.lang.Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../Vertex.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.ObservableModel
	c12595 [label=<<table title="pfc.models.ObservableModel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../ObservableModel.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ObservableModel </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ObservableModel() </td></tr>
		</table></td></tr>
		</table>>, URL="../../ObservableModel.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Graph
	c12598 [label=<<table title="pfc.models.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Graph </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + name : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + vertices : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + edges : java.util.List&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + areLoopsAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areMultipleEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areDirectedEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areCyclesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> - incidences : java.util.Map&lt;pfc.models.Vertex, java.util.Set&lt;pfc.models.Edge&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - newLabelAvailable : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Graph() </td></tr>
<tr><td align="left" balign="left"> + Graph(attributes : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Graph(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Graph(name : java.lang.String, areLoopsAllowed : boolean, areDirectedEdgesAllowed : boolean, areMultipleEdgesAllowed : boolean, areCyclesAllowed : boolean) </td></tr>
<tr><td align="left" balign="left"> + areConnected(from : pfc.models.Vertex, to : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdges(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges(from : pfc.models.Vertex, to : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesFrom(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesTo(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighbors(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsIn(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsOut(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsInOut(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedEdges() : java.util.List&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedVertices() : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + hasSelectedEdges() : boolean </td></tr>
<tr><td align="left" balign="left"> + hasSelectedVertices() : boolean </td></tr>
<tr><td align="left" balign="left"> + selectAll(select : boolean) </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + translateSelected(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + union(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + setNewVertexLabelAvailable(newVertex : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + getNewLabelAvailable() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getVertexSource() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexTarget() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../Graph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Edge
	c12599 [label=<<table title="pfc.models.Edge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../Edge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Edge </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isDirected : boolean </td></tr>
<tr><td align="left" balign="left"> + from : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + to : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + isLoop : boolean </td></tr>
<tr><td align="left" balign="left"> + weight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + label : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + thickness : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleX : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleY : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> - arc : java.awt.geom.Arc2D.Double </td></tr>
<tr><td align="left" balign="left"> - line : java.awt.geom.Line2D.Double </td></tr>
<tr><td align="left" balign="left"> - center : java.awt.geom.Point2D.Double </td></tr>
<tr><td align="left" balign="left"> - bends : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - isLinear : boolean </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - vertexObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int, label : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int, label : java.lang.String, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Edge(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Edge(json : java.lang.String, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + getArc() : java.awt.geom.Arc2D </td></tr>
<tr><td align="left" balign="left"> + getCenter() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getHandlePoint2D() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getLine() : java.awt.geom.Line2D </td></tr>
<tr><td align="left" balign="left"> + getBends() : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getTotalOfBends() : int </td></tr>
<tr><td align="left" balign="left"> + setBends(bends : java.util.List&lt;java.awt.geom.Point2D&gt;) </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(edge : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + isIncident(vertex : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + isLinear() : boolean </td></tr>
<tr><td align="left" balign="left"> + isPolyline() : boolean </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : java.lang.Object) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateArc() </td></tr>
<tr><td align="left" balign="left"> - updateCenter() </td></tr>
		</table></td></tr>
		</table>>, URL="../../Edge.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm
	c12617 [label=<<table title="pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./PolylineDominanceAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PolylineDominanceAlgorithm </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - slDominance : SLDominanceAlgorithm </td></tr>
<tr><td align="left" balign="left"> - reduced : Graph </td></tr>
<tr><td align="left" balign="left"> - dummyVertices : List&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - step : PolylineDominanceAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + PolylineDominanceAlgorithm(stGraphG : Graph) </td></tr>
<tr><td align="left" balign="left"> + getDominanceDrawing() : DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> + getReduced() : Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - makeGraphReduced() </td></tr>
<tr><td align="left" balign="left"> - insertDummyVertex(e : Edge) </td></tr>
<tr><td align="left" balign="left"> - constructSLDominanceDrawing() </td></tr>
<tr><td align="left" balign="left"> - turnDummyVerticesIntoBends() </td></tr>
		</table></td></tr>
		</table>>, URL="./PolylineDominanceAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm
	c12620 [label=<<table title="pfc.models.algorithms.sldominance.SLDominanceAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../sldominance/SLDominanceAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SLDominanceAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.sldominance </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - dominance : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> - rotationsOut : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - rotationsIn : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.sldominance.SLDominanceAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - count : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SLDominanceAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - preprocessGraph() </td></tr>
<tr><td align="left" balign="left"> - nextOut(v : pfc.models.Vertex, n : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - predOut(v : pfc.models.Vertex, n : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - firstOut(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - lastOut(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - firstIn(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - lastIn(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - assignPreliminaryCoordinates() </td></tr>
<tr><td align="left" balign="left"> - labelX(v : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - labelY(v : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinates() </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinatesX() </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinatesY() </td></tr>
<tr><td align="left" balign="left"> - initXCoordinateVertices() : java.util.TreeSet&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - initYCoordinateVertices() : java.util.TreeSet&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - equalsDegreeInOut(u : pfc.models.Vertex, v : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../sldominance/SLDominanceAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.sldominance.DominanceDrawing
	c12622 [label=<<table title="pfc.models.algorithms.sldominance.DominanceDrawing" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../sldominance/DominanceDrawing.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DominanceDrawing </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.sldominance </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - graph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - maxX : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - maxY : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DominanceDrawing(areLoopsAllowed : boolean, areDirectedEdgesAllowed : boolean, areMultipleEdgesAllowed : boolean, areCyclesAllowed : boolean) </td></tr>
<tr><td align="left" balign="left"> + DominanceDrawing(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + DominanceDrawing(attributes : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + DominanceDrawing(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getGraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMaxXCoordinate() : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + getMaxYCoordinate() : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - setMaxCoordinates() </td></tr>
		</table></td></tr>
		</table>>, URL="../sldominance/DominanceDrawing.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.resources.StringBundle
	c12631 [label=<<table title="pfc.resources.StringBundle" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../../resources/StringBundle.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StringBundle </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.resources </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - instance : java.util.ResourceBundle </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - StringBundle() </td></tr>
<tr><td align="left" balign="left"> + get(key : java.lang.String) : java.lang.String </td></tr>
		</table></td></tr>
		</table>>, URL="../../../resources/StringBundle.html", fontname="arial", fontcolor="black", fontsize=9.0];
	//pfc.models.Vertex extends pfc.models.ObservableModel
	c12595:p -> c12594:p [dir=back,arrowtail=empty];
	//pfc.models.Graph extends pfc.models.ObservableModel
	c12595:p -> c12598:p [dir=back,arrowtail=empty];
	// pfc.models.Graph NAVASSOC pfc.models.Vertex
	c12598:p -> c12594:p [taillabel="", label="", headlabel="*\n-vertices", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Graph NAVASSOC pfc.models.Edge
	c12598:p -> c12599:p [taillabel="", label="", headlabel="*\n-edges", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.Edge extends pfc.models.ObservableModel
	c12595:p -> c12599:p [dir=back,arrowtail=empty];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c12599:p -> c12594:p [taillabel="", label="", headlabel="*\n-to", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c12599:p -> c12594:p [taillabel="", label="", headlabel="*\n-from", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm extends pfc.models.ObservableModel
	c12595:p -> c12617:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm NAVASSOC pfc.models.algorithms.sldominance.SLDominanceAlgorithm
	c12617:p -> c12620:p [taillabel="", label="", headlabel="-slDominance", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm NAVASSOC pfc.models.Graph
	c12617:p -> c12598:p [taillabel="", label="", headlabel="-reduced", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm NAVASSOC pfc.models.Vertex
	c12617:p -> c12594:p [taillabel="", label="", headlabel="*\n-dummyVertices", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm DEPEND pfc.models.Edge
	c12617:p -> c12599:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm DEPEND pfc.models.algorithms.sldominance.DominanceDrawing
	c12617:p -> c12622:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm DEPEND pfc.resources.StringBundle
	c12617:p -> c12631:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm DEPEND pfc.resources.StringBundle
	c12617:p -> c12631:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.sldominance.SLDominanceAlgorithm extends pfc.models.ObservableModel
	c12595:p -> c12620:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm NAVASSOC pfc.models.Graph
	c12620:p -> c12598:p [taillabel="", label="", headlabel="-dominance", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm NAVASSOC pfc.models.algorithms.sldominance.DominanceDrawing
	c12620:p -> c12622:p [taillabel="", label="", headlabel="-drawing", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm DEPEND pfc.models.Edge
	c12620:p -> c12599:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm DEPEND pfc.models.Vertex
	c12620:p -> c12594:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm DEPEND pfc.resources.StringBundle
	c12620:p -> c12631:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.sldominance.DominanceDrawing extends pfc.models.ObservableModel
	c12595:p -> c12622:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.sldominance.DominanceDrawing NAVASSOC pfc.models.Graph
	c12622:p -> c12598:p [taillabel="", label="", headlabel="-graph", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

