#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.Vertex
	c15446 [label=<<table title="pfc.models.Vertex" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../Vertex.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Vertex </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + id : pfc.models.ObservableModel.Property&lt;java.util.UUID&gt; </td></tr>
<tr><td align="left" balign="left"> + x : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + y : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + label : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + radius : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + weight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Vertex() </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double, color : int, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Vertex(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Vertex(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getPoint2D() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + isIncident(edge : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : java.lang.Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../Vertex.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.ObservableModel
	c15447 [label=<<table title="pfc.models.ObservableModel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../ObservableModel.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ObservableModel </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ObservableModel() </td></tr>
		</table></td></tr>
		</table>>, URL="../../ObservableModel.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Graph
	c15450 [label=<<table title="pfc.models.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Graph </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + name : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + vertices : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + edges : java.util.List&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + areLoopsAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areMultipleEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areDirectedEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areCyclesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> - incidences : java.util.Map&lt;pfc.models.Vertex, java.util.Set&lt;pfc.models.Edge&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - newLabelAvailable : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Graph() </td></tr>
<tr><td align="left" balign="left"> + Graph(attributes : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Graph(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Graph(name : java.lang.String, areLoopsAllowed : boolean, areDirectedEdgesAllowed : boolean, areMultipleEdgesAllowed : boolean, areCyclesAllowed : boolean) </td></tr>
<tr><td align="left" balign="left"> + areConnected(from : pfc.models.Vertex, to : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdges(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges(from : pfc.models.Vertex, to : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesFrom(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesTo(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighbors(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsIn(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsOut(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsInOut(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedEdges() : java.util.List&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedVertices() : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + hasSelectedEdges() : boolean </td></tr>
<tr><td align="left" balign="left"> + hasSelectedVertices() : boolean </td></tr>
<tr><td align="left" balign="left"> + selectAll(select : boolean) </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + translateSelected(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + union(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + setNewVertexLabelAvailable(newVertex : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + getNewLabelAvailable() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getVertexSource() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexTarget() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../Graph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Edge
	c15451 [label=<<table title="pfc.models.Edge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../Edge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Edge </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isDirected : boolean </td></tr>
<tr><td align="left" balign="left"> + from : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + to : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + isLoop : boolean </td></tr>
<tr><td align="left" balign="left"> + weight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + label : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + thickness : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleX : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleY : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> - arc : java.awt.geom.Arc2D.Double </td></tr>
<tr><td align="left" balign="left"> - line : java.awt.geom.Line2D.Double </td></tr>
<tr><td align="left" balign="left"> - center : java.awt.geom.Point2D.Double </td></tr>
<tr><td align="left" balign="left"> - bends : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - isLinear : boolean </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - vertexObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int, label : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int, label : java.lang.String, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Edge(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Edge(json : java.lang.String, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + getArc() : java.awt.geom.Arc2D </td></tr>
<tr><td align="left" balign="left"> + getCenter() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getHandlePoint2D() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getLine() : java.awt.geom.Line2D </td></tr>
<tr><td align="left" balign="left"> + getBends() : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getTotalOfBends() : int </td></tr>
<tr><td align="left" balign="left"> + setBends(bends : java.util.List&lt;java.awt.geom.Point2D&gt;) </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(edge : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + isIncident(vertex : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + isLinear() : boolean </td></tr>
<tr><td align="left" balign="left"> + isPolyline() : boolean </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : java.lang.Object) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateArc() </td></tr>
<tr><td align="left" balign="left"> - updateCenter() </td></tr>
		</table></td></tr>
		</table>>, URL="../../Edge.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm
	c15466 [label=<<table title="pfc.models.algorithms.polyline.UpwardPolylineAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./UpwardPolylineAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UpwardPolylineAlgorithm </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - visibility : VisibilityRepresentationAlgorithm </td></tr>
<tr><td align="left" balign="left"> - polyline : Graph </td></tr>
<tr><td align="left" balign="left"> - step : UpwardPolylineAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UpwardPolylineAlgorithm(stGraphG : Graph) </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getPolyline() : Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - getLongEdgePositioning(vS : VertexSegment) : Point2D </td></tr>
<tr><td align="left" balign="left"> - getMedianPositioning(vS : VertexSegment) : Point2D </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : EdgeSegment) : Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : EdgeSegment) : Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="./UpwardPolylineAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c15476 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../visibilityrepresentation/VisibilityRepresentationDrawing.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VisibilityRepresentationDrawing </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + vertexSegments : java.util.List&lt;pfc.models.algorithms.visibilityrepresentation.VertexSegment&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeSegments : java.util.List&lt;pfc.models.algorithms.visibilityrepresentation.EdgeSegment&gt; </td></tr>
<tr><td align="left" balign="left"> - vertexToSegment : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.visibilityrepresentation.VertexSegment&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeToSegment : java.util.Map&lt;pfc.models.Edge, pfc.models.algorithms.visibilityrepresentation.EdgeSegment&gt; </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - maxX : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - maxY : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VisibilityRepresentationDrawing() </td></tr>
<tr><td align="left" balign="left"> + VisibilityRepresentationDrawing(attributes : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + VisibilityRepresentationDrawing(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getVertexSegment(v : pfc.models.Vertex) : pfc.models.algorithms.visibilityrepresentation.VertexSegment </td></tr>
<tr><td align="left" balign="left"> + getEdgeSegment(e : pfc.models.Edge) : pfc.models.algorithms.visibilityrepresentation.EdgeSegment </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMaxXCoordinate() : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + getMaxYCoordinate() : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - setMaxCoordinates() </td></tr>
		</table></td></tr>
		</table>>, URL="../visibilityrepresentation/VisibilityRepresentationDrawing.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm
	c15479 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../visibilityrepresentation/VisibilityRepresentationAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VisibilityRepresentationAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - stDualG : pfc.models.algorithms.DualGraph </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VisibilityRepresentationAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getStDualG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getStGraphG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingY() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingX() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX() </td></tr>
<tr><td align="left" balign="left"> - numberY(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - numberX(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
		</table></td></tr>
		</table>>, URL="../visibilityrepresentation/VisibilityRepresentationAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c15481 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.VertexSegment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../visibilityrepresentation/VertexSegment.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VertexSegment </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + yCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + xLeftCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + xRightCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + vertex : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + id : pfc.models.ObservableModel.Property&lt;java.util.UUID&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VertexSegment() </td></tr>
<tr><td align="left" balign="left"> + VertexSegment(yCoordinate : java.lang.Integer, xLeftCoordinate : java.lang.Integer, xRightCoordinate : java.lang.Integer) </td></tr>
<tr><td align="left" balign="left"> + VertexSegment(yCoordinate : java.lang.Integer, xLeftCoordinate : java.lang.Integer, xRightCoordinate : java.lang.Integer, vertex : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + VertexSegment(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + VertexSegment(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
		</table></td></tr>
		</table>>, URL="../visibilityrepresentation/VertexSegment.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c15482 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.EdgeSegment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../visibilityrepresentation/EdgeSegment.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EdgeSegment </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + xCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + yBottomCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + yTopCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + edge : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> + id : pfc.models.ObservableModel.Property&lt;java.util.UUID&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EdgeSegment() </td></tr>
<tr><td align="left" balign="left"> + EdgeSegment(xCoordinate : java.lang.Integer, yBottomCoordinate : java.lang.Integer, yTopCoordinate : java.lang.Integer) </td></tr>
<tr><td align="left" balign="left"> + EdgeSegment(xCoordinate : java.lang.Integer, yBottomCoordinate : java.lang.Integer, yTopCoordinate : java.lang.Integer, edge : pfc.models.Edge) </td></tr>
<tr><td align="left" balign="left"> + EdgeSegment(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + EdgeSegment(json : java.lang.String, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + isShortEdge() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
		</table></td></tr>
		</table>>, URL="../visibilityrepresentation/EdgeSegment.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.resources.StringBundle
	c15483 [label=<<table title="pfc.resources.StringBundle" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../../resources/StringBundle.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StringBundle </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.resources </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - instance : java.util.ResourceBundle </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - StringBundle() </td></tr>
<tr><td align="left" balign="left"> + get(key : java.lang.String) : java.lang.String </td></tr>
		</table></td></tr>
		</table>>, URL="../../../resources/StringBundle.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.views.display.algorithms.visibilityrepresentation.VisRepDrawingDisplayView
	c15520 [label=<<table title="pfc.views.display.algorithms.visibilityrepresentation.VisRepDrawingDisplayView" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../../views/display/algorithms/visibilityrepresentation/VisRepDrawingDisplayView.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VisRepDrawingDisplayView </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.views.display.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VisRepDrawingDisplayView() </td></tr>
<tr><td align="left" balign="left"> + paintDrawing(g2D : java.awt.Graphics2D, drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing) </td></tr>
<tr><td align="left" balign="left"> + paintDrawingBackground(g2D : java.awt.Graphics2D, drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing) </td></tr>
<tr><td align="left" balign="left"> + paintDrawingBackgroundWithoutAxes(g2D : java.awt.Graphics2D, drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing) </td></tr>
<tr><td align="left" balign="left"> - paintBackground(g2D : java.awt.Graphics2D, pOrigin : java.awt.geom.Point2D, pDest : java.awt.geom.Point2D) </td></tr>
<tr><td align="left" balign="left"> + getBounds(drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing) : java.awt.geom.Rectangle2D </td></tr>
<tr><td align="left" balign="left"> - paintAxeX(g2D : java.awt.Graphics2D, drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing) </td></tr>
<tr><td align="left" balign="left"> - paintAxeY(g2D : java.awt.Graphics2D, drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing) </td></tr>
<tr><td align="left" balign="left"> + getVertexSegmentPoint(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, firstX : double, firstY : double) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getEdgeSegmentLine(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, firstX : double, firstY : double) : java.awt.geom.Line2D </td></tr>
<tr><td align="left" balign="left"> + getCoordinatePoint(x : int, y : int, drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getCoordinatePoint(x : int, y : int, firstX : double, firstY : double) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getFirstX() : double </td></tr>
<tr><td align="left" balign="left"> + getFirstY(drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing) : double </td></tr>
<tr><td align="left" balign="left"> - getAxeYTopPoint() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getAxeYBottomPoint(drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getAxeXLeftPoint(drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getAxeXRightPoint(drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="../../../views/display/algorithms/visibilityrepresentation/VisRepDrawingDisplayView.html", fontname="arial", fontcolor="black", fontsize=9.0];
	//pfc.models.Vertex extends pfc.models.ObservableModel
	c15447:p -> c15446:p [dir=back,arrowtail=empty];
	//pfc.models.Graph extends pfc.models.ObservableModel
	c15447:p -> c15450:p [dir=back,arrowtail=empty];
	// pfc.models.Graph NAVASSOC pfc.models.Vertex
	c15450:p -> c15446:p [taillabel="", label="", headlabel="*\n-vertices", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Graph NAVASSOC pfc.models.Edge
	c15450:p -> c15451:p [taillabel="", label="", headlabel="*\n-edges", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.Edge extends pfc.models.ObservableModel
	c15447:p -> c15451:p [dir=back,arrowtail=empty];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c15451:p -> c15446:p [taillabel="", label="", headlabel="*\n-to", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c15451:p -> c15446:p [taillabel="", label="", headlabel="*\n-from", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.polyline.UpwardPolylineAlgorithm extends pfc.models.ObservableModel
	c15447:p -> c15466:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm NAVASSOC pfc.models.Graph
	c15466:p -> c15450:p [taillabel="", label="", headlabel="-polyline", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm NAVASSOC pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm
	c15466:p -> c15479:p [taillabel="", label="", headlabel="-visibility", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.Edge
	c15466:p -> c15451:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.Vertex
	c15466:p -> c15446:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c15466:p -> c15482:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c15466:p -> c15481:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c15466:p -> c15476:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.views.display.algorithms.visibilityrepresentation.VisRepDrawingDisplayView
	c15466:p -> c15520:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.resources.StringBundle
	c15466:p -> c15483:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing extends pfc.models.ObservableModel
	c15447:p -> c15476:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing NAVASSOC pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c15476:p -> c15481:p [taillabel="", label="", headlabel="*\n-vertexSegments", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing NAVASSOC pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c15476:p -> c15482:p [taillabel="", label="", headlabel="*\n-edgeSegments", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm extends pfc.models.ObservableModel
	c15447:p -> c15479:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm NAVASSOC pfc.models.Graph
	c15479:p -> c15450:p [taillabel="", label="", headlabel="-stGraphG", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm NAVASSOC pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c15479:p -> c15476:p [taillabel="", label="", headlabel="-drawing", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm DEPEND pfc.resources.StringBundle
	c15479:p -> c15483:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.visibilityrepresentation.VertexSegment extends pfc.models.ObservableModel
	c15447:p -> c15481:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.visibilityrepresentation.VertexSegment NAVASSOC pfc.models.Vertex
	c15481:p -> c15446:p [taillabel="", label="", headlabel="*\n-vertex", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.visibilityrepresentation.EdgeSegment extends pfc.models.ObservableModel
	c15447:p -> c15482:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.visibilityrepresentation.EdgeSegment NAVASSOC pfc.models.Edge
	c15482:p -> c15451:p [taillabel="", label="", headlabel="*\n-edge", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

