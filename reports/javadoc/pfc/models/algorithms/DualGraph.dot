#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.Vertex
	c6267 [label=<<table title="pfc.models.Vertex" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Vertex.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Vertex </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + id : pfc.models.ObservableModel.Property&lt;java.util.UUID&gt; </td></tr>
<tr><td align="left" balign="left"> + x : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + y : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + label : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + radius : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + weight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Vertex() </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : java.lang.String, radius : double, color : int, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Vertex(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Vertex(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getPoint2D() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + isIncident(edge : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : java.lang.Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../Vertex.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Graph
	c6271 [label=<<table title="pfc.models.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Graph </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + name : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + vertices : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + edges : java.util.List&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + areLoopsAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areMultipleEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areDirectedEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areCyclesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> - incidences : java.util.Map&lt;pfc.models.Vertex, java.util.Set&lt;pfc.models.Edge&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - newLabelAvailable : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Graph() </td></tr>
<tr><td align="left" balign="left"> + Graph(attributes : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Graph(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Graph(name : java.lang.String, areLoopsAllowed : boolean, areDirectedEdgesAllowed : boolean, areMultipleEdgesAllowed : boolean, areCyclesAllowed : boolean) </td></tr>
<tr><td align="left" balign="left"> + areConnected(from : pfc.models.Vertex, to : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdges(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges(from : pfc.models.Vertex, to : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesFrom(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesTo(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighbors(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsIn(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsOut(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsInOut(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedEdges() : java.util.List&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedVertices() : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + hasSelectedEdges() : boolean </td></tr>
<tr><td align="left" balign="left"> + hasSelectedVertices() : boolean </td></tr>
<tr><td align="left" balign="left"> + selectAll(select : boolean) </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + translateSelected(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + union(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + setNewVertexLabelAvailable(newVertex : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + getNewLabelAvailable() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getVertexSource() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexTarget() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../Graph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Edge
	c6272 [label=<<table title="pfc.models.Edge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Edge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Edge </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isDirected : boolean </td></tr>
<tr><td align="left" balign="left"> + from : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + to : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + isLoop : boolean </td></tr>
<tr><td align="left" balign="left"> + weight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + label : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + thickness : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleX : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleY : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> - arc : java.awt.geom.Arc2D.Double </td></tr>
<tr><td align="left" balign="left"> - line : java.awt.geom.Line2D.Double </td></tr>
<tr><td align="left" balign="left"> - center : java.awt.geom.Point2D.Double </td></tr>
<tr><td align="left" balign="left"> - bends : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - isLinear : boolean </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - vertexObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int, label : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int, label : java.lang.String, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Edge(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Edge(json : java.lang.String, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + getArc() : java.awt.geom.Arc2D </td></tr>
<tr><td align="left" balign="left"> + getCenter() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getHandlePoint2D() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getLine() : java.awt.geom.Line2D </td></tr>
<tr><td align="left" balign="left"> + getBends() : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getTotalOfBends() : int </td></tr>
<tr><td align="left" balign="left"> + setBends(bends : java.util.List&lt;java.awt.geom.Point2D&gt;) </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(edge : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + isIncident(vertex : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + isLinear() : boolean </td></tr>
<tr><td align="left" balign="left"> + isPolyline() : boolean </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : java.lang.Object) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateArc() </td></tr>
<tr><td align="left" balign="left"> - updateCenter() </td></tr>
		</table></td></tr>
		</table>>, URL="../Edge.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.Rotation
	c6274 [label=<<table title="pfc.models.algorithms.Rotation" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Rotation.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Rotation </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Rotation(center : Vertex) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : Vertex, reference : Vertex) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : Vertex, neighbors : Set&lt;Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : Vertex, reference : Vertex, neighbors : Set&lt;Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : Vertex, neighbors : Set&lt;Vertex&gt;, reference : boolean) </td></tr>
<tr><td align="left" balign="left"> - determineReference(center : Vertex, neighbors : Set&lt;Vertex&gt;) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getClockwiseVertex(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getCounterClockwiseVertex(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + higher(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + lower(v : Vertex) : Vertex </td></tr>
		</table></td></tr>
		</table>>, URL="./Rotation.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.DualGraph
	c6277 [label=<<table title="pfc.models.algorithms.DualGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./DualGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DualGraph </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : Graph </td></tr>
<tr><td align="left" balign="left"> - vertexS : Vertex </td></tr>
<tr><td align="left" balign="left"> - vertexT : Vertex </td></tr>
<tr><td align="left" balign="left"> - faceS : Vertex </td></tr>
<tr><td align="left" balign="left"> - faceT : Vertex </td></tr>
<tr><td align="left" balign="left"> - leftVerticesFaces : Map&lt;Vertex, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightVerticesFaces : Map&lt;Vertex, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - leftEdgesFaces : Map&lt;Edge, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightEdgesFaces : Map&lt;Edge, Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rotations : Map&lt;Vertex, Rotation&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DualGraph(stGraph : Graph) </td></tr>
<tr><td align="left" balign="left"> + left(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + right(v : Vertex) : Vertex </td></tr>
<tr><td align="left" balign="left"> + left(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + right(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + orig(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + dest(e : Edge) : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexS() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexT() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceS() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceT() : Vertex </td></tr>
<tr><td align="left" balign="left"> - constructRotations() </td></tr>
<tr><td align="left" balign="left"> + constructDualGraph() </td></tr>
<tr><td align="left" balign="left"> - setOuterFaces() </td></tr>
<tr><td align="left" balign="left"> - determineOuterEdges() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFaces() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFace(e : Edge) </td></tr>
<tr><td align="left" balign="left"> - setInnerFace(polygon : List&lt;Point2D&gt;, face : Vertex) </td></tr>
<tr><td align="left" balign="left"> - setDualEdges() </td></tr>
<tr><td align="left" balign="left"> - setLeftRightVerticesFaces() </td></tr>
		</table></td></tr>
		</table>>, URL="./DualGraph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm
	c6300 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./visibilityrepresentation/VisibilityRepresentationAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VisibilityRepresentationAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - stDualG : pfc.models.algorithms.DualGraph </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VisibilityRepresentationAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getStDualG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getStGraphG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingY() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingX() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX() </td></tr>
<tr><td align="left" balign="left"> - numberY(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - numberX(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
		</table></td></tr>
		</table>>, URL="./visibilityrepresentation/VisibilityRepresentationAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.GeometryUtilities
	c6319 [label=<<table title="pfc.utilities.GeometryUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../utilities/GeometryUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GeometryUtilities </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GeometryUtilities() </td></tr>
<tr><td align="left" balign="left"> + angle(x : double, y : double) : double </td></tr>
<tr><td align="left" balign="left"> + angleBetween(angle0 : double, angle1 : double) : double </td></tr>
<tr><td align="left" balign="left"> + areClose(point : java.awt.geom.Point2D, line : java.awt.geom.Line2D) : boolean </td></tr>
<tr><td align="left" balign="left"> + determinant(A : double[][]) : double </td></tr>
<tr><td align="left" balign="left"> + distance(v0 : pfc.models.Vertex, v1 : pfc.models.Vertex) : double </td></tr>
<tr><td align="left" balign="left"> + distanceSq(v0 : pfc.models.Vertex, v1 : pfc.models.Vertex) : double </td></tr>
<tr><td align="left" balign="left"> + getBounds(graph : pfc.models.Graph) : java.awt.geom.Rectangle2D </td></tr>
<tr><td align="left" balign="left"> + getCrossings(arc0 : java.awt.geom.Arc2D, arc0Center : java.awt.geom.Point2D, arc1 : java.awt.geom.Arc2D, arc1Center : java.awt.geom.Point2D) : java.util.Vector&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getCrossings(line : java.awt.geom.Line2D, arc : java.awt.geom.Arc2D, arcCenter : java.awt.geom.Point2D) : java.util.Vector&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getCrossings(line0 : java.awt.geom.Line2D, line1 : java.awt.geom.Line2D) : java.util.Vector&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + isBetween(a : java.awt.geom.Point2D, b : java.awt.geom.Point2D, c : java.awt.geom.Point2D) : boolean </td></tr>
<tr><td align="left" balign="left"> + midpoint(x0 : double, y0 : double, x1 : double, y1 : double) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + midpoint(v0 : pfc.models.Vertex, v1 : pfc.models.Vertex) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + threeOutOfFourPoint(x0 : double, y0 : double, x1 : double, y1 : double) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + threeOutOfFourPoint(v0 : pfc.models.Vertex, v1 : pfc.models.Vertex) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + slope(x0 : double, y0 : double, x1 : double, y1 : double) : double </td></tr>
<tr><td align="left" balign="left"> + slope(line : java.awt.geom.Line2D) : double </td></tr>
<tr><td align="left" balign="left"> + getClockwiseAngle(p1 : java.awt.geom.Point2D, p2 : java.awt.geom.Point2D, p3 : java.awt.geom.Point2D) : double </td></tr>
<tr><td align="left" balign="left"> + getAngle(p1 : java.awt.geom.Point2D, p2 : java.awt.geom.Point2D, p3 : java.awt.geom.Point2D, p4 : java.awt.geom.Point2D) : double </td></tr>
<tr><td align="left" balign="left"> + getTheClosestVertexToOrigin(graph : pfc.models.Graph) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + isCloserToOrigin(v1 : pfc.models.Vertex, v2 : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getTheFarthestVertexToOrigin(graph : pfc.models.Graph) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + calculateSignedPolygonArea(polygon : java.util.List&lt;java.awt.geom.Point2D&gt;) : double </td></tr>
<tr><td align="left" balign="left"> + getPolygonCentroid(polygon : java.util.List&lt;java.awt.geom.Point2D&gt;) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="../../utilities/GeometryUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Graph NAVASSOC pfc.models.Vertex
	c6271:p -> c6267:p [taillabel="", label="", headlabel="*\n-vertices", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Graph NAVASSOC pfc.models.Edge
	c6271:p -> c6272:p [taillabel="", label="", headlabel="*\n-edges", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c6272:p -> c6267:p [taillabel="", label="", headlabel="*\n-to", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c6272:p -> c6267:p [taillabel="", label="", headlabel="*\n-from", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.Rotation NAVASSOC pfc.models.Vertex
	c6274:p -> c6267:p [taillabel="", label="", headlabel="*\n", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.DualGraph extends pfc.models.Graph
	c6271:p -> c6277:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Graph
	c6277:p -> c6271:p [taillabel="", label="", headlabel="-stGraphG", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c6277:p -> c6267:p [taillabel="", label="", headlabel="-vertexS", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c6277:p -> c6267:p [taillabel="", label="", headlabel="-vertexT", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c6277:p -> c6267:p [taillabel="", label="", headlabel="-faceS", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c6277:p -> c6267:p [taillabel="", label="", headlabel="-faceT", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c6277:p -> c6267:p [taillabel="", label="", headlabel="*\n-leftVerticesFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c6277:p -> c6267:p [taillabel="", label="", headlabel="*\n-rightVerticesFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Edge
	c6277:p -> c6272:p [taillabel="", label="", headlabel="*\n-leftEdgesFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Edge
	c6277:p -> c6272:p [taillabel="", label="", headlabel="*\n-rightEdgesFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.algorithms.Rotation
	c6277:p -> c6274:p [taillabel="", label="", headlabel="*\n-rotations", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph DEPEND pfc.utilities.GeometryUtilities
	c6277:p -> c6319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm NAVASSOC pfc.models.Graph
	c6300:p -> c6271:p [taillabel="", label="", headlabel="-stGraphG", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm NAVASSOC pfc.models.algorithms.DualGraph
	c6300:p -> c6277:p [taillabel="", label="", headlabel="-stDualG", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

