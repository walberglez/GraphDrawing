#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.ObservableModel
	c7260 [label=<<table title="pfc.models.ObservableModel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../ObservableModel.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ObservableModel </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ObservableModel() </td></tr>
		</table></td></tr>
		</table>>, URL="../../ObservableModel.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Edge
	c7264 [label=<<table title="pfc.models.Edge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../Edge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Edge </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isDirected : boolean </td></tr>
<tr><td align="left" balign="left"> + from : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + to : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + isLoop : boolean </td></tr>
<tr><td align="left" balign="left"> + weight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + label : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + thickness : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleX : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleY : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> - arc : java.awt.geom.Arc2D.Double </td></tr>
<tr><td align="left" balign="left"> - line : java.awt.geom.Line2D.Double </td></tr>
<tr><td align="left" balign="left"> - center : java.awt.geom.Point2D.Double </td></tr>
<tr><td align="left" balign="left"> - bends : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - isLinear : boolean </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - vertexObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int, label : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : pfc.models.Vertex, to : pfc.models.Vertex, weight : double, color : int, label : java.lang.String, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Edge(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Edge(json : java.lang.String, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + getArc() : java.awt.geom.Arc2D </td></tr>
<tr><td align="left" balign="left"> + getCenter() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getHandlePoint2D() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> + getLine() : java.awt.geom.Line2D </td></tr>
<tr><td align="left" balign="left"> + getBends() : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getTotalOfBends() : int </td></tr>
<tr><td align="left" balign="left"> + setBends(bends : java.util.List&lt;java.awt.geom.Point2D&gt;) </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(edge : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + isIncident(vertex : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + isLinear() : boolean </td></tr>
<tr><td align="left" balign="left"> + isPolyline() : boolean </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : java.lang.Object) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateArc() </td></tr>
<tr><td align="left" balign="left"> - updateCenter() </td></tr>
		</table></td></tr>
		</table>>, URL="../../Edge.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm
	c7271 [label=<<table title="pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../constrainedpolyline/ConstrainedPolylineAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConstrainedPolylineAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.constrainedpolyline </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - polyline : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ConstrainedPolylineAlgorithm(stGraphG : pfc.models.Graph, paths : pfc.models.algorithms.NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getPolyline() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getLongEdgePositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getMedianPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, path : pfc.models.algorithms.DirectedPath) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="../constrainedpolyline/ConstrainedPolylineAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c7273 [label=<<table title="pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../constrainedvisrep/ConstrainedVisRepAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.constrainedvisrep </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - stDualG : pfc.models.algorithms.DualPathGraph </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ConstrainedVisRepAlgorithm(stGraphG : pfc.models.Graph, paths : pfc.models.algorithms.NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + getStDualG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getStGraphG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingY() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingX() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + numberY(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + numberX(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + getPathFace(path : pfc.models.algorithms.DirectedPath) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getNumberXPaths(v : pfc.models.Vertex) : java.util.List&lt;java.lang.Integer&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="../constrainedvisrep/ConstrainedVisRepAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm
	c7276 [label=<<table title="pfc.models.algorithms.orthogonal.OrthogonalAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../orthogonal/OrthogonalAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrthogonalAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.orthogonal </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - orthogonal : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - digraph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - pathToVertices : java.util.Map&lt;pfc.models.algorithms.DirectedPath, java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.orthogonal.OrthogonalAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + OrthogonalAlgorithm(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getOrthogonal() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getDigraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - orientGraph() </td></tr>
<tr><td align="left" balign="left"> - selectPaths() </td></tr>
<tr><td align="left" balign="left"> - createPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - getLeftmostIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getRightmostOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getNeighborsIn(in : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - getNeighborsOut(out : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - joinPaths(allPaths : java.util.List&lt;pfc.models.algorithms.DirectedPath&gt;, path : pfc.models.algorithms.DirectedPath) </td></tr>
<tr><td align="left" balign="left"> - executeVisibility() </td></tr>
<tr><td align="left" balign="left"> - constructVertices() </td></tr>
<tr><td align="left" balign="left"> - getPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getSTAxeXCoordinate(neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : int </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getAssociatedPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - constructEdges() </td></tr>
<tr><td align="left" balign="left"> - calculateBends(e : pfc.models.Edge, newE : pfc.models.Edge) : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendFromSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendSourcePositioning(s : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendTargetPositioning(t : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - isProblematicSTEdge(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, st : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../orthogonal/OrthogonalAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm
	c7279 [label=<<table title="pfc.models.algorithms.polyline.UpwardPolylineAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../polyline/UpwardPolylineAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UpwardPolylineAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.polyline </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm </td></tr>
<tr><td align="left" balign="left"> - polyline : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.polyline.UpwardPolylineAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UpwardPolylineAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getPolyline() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - getLongEdgePositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getMedianPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="../polyline/UpwardPolylineAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c7289 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./VisibilityRepresentationDrawing.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VisibilityRepresentationDrawing </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + vertexSegments : List&lt;VertexSegment&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeSegments : List&lt;EdgeSegment&gt; </td></tr>
<tr><td align="left" balign="left"> - vertexToSegment : Map&lt;Vertex, VertexSegment&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeToSegment : Map&lt;Edge, EdgeSegment&gt; </td></tr>
<tr><td align="left" balign="left"> - elementObserver : Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - maxX : Integer </td></tr>
<tr><td align="left" balign="left"> - maxY : Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VisibilityRepresentationDrawing() </td></tr>
<tr><td align="left" balign="left"> + VisibilityRepresentationDrawing(attributes : Map&lt;String, Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + VisibilityRepresentationDrawing(json : String) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getVertexSegment(v : Vertex) : VertexSegment </td></tr>
<tr><td align="left" balign="left"> + getEdgeSegment(e : Edge) : EdgeSegment </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMaxXCoordinate() : Integer </td></tr>
<tr><td align="left" balign="left"> + getMaxYCoordinate() : Integer </td></tr>
<tr><td align="left" balign="left"> - setMaxCoordinates() </td></tr>
		</table></td></tr>
		</table>>, URL="./VisibilityRepresentationDrawing.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c7295 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.EdgeSegment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./EdgeSegment.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EdgeSegment </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + xCoordinate : ObservableModel.Property&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + yBottomCoordinate : ObservableModel.Property&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + yTopCoordinate : ObservableModel.Property&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + edge : Edge </td></tr>
<tr><td align="left" balign="left"> + id : ObservableModel.Property&lt;UUID&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EdgeSegment() </td></tr>
<tr><td align="left" balign="left"> + EdgeSegment(xCoordinate : Integer, yBottomCoordinate : Integer, yTopCoordinate : Integer) </td></tr>
<tr><td align="left" balign="left"> + EdgeSegment(xCoordinate : Integer, yBottomCoordinate : Integer, yTopCoordinate : Integer, edge : Edge) </td></tr>
<tr><td align="left" balign="left"> + EdgeSegment(members : Map&lt;String, Object&gt;, vertices : Map&lt;String, Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + EdgeSegment(json : String, vertices : Map&lt;String, Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + isShortEdge() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./EdgeSegment.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.JsonUtilities
	c7308 [label=<<table title="pfc.utilities.JsonUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../../utilities/JsonUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> JsonUtilities </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + JsonUtilities() </td></tr>
<tr><td align="left" balign="left"> + formatArray(i : java.lang.Iterable&lt;?&gt;) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> - formatColor(color : java.awt.Color) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + formatObject(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + formatString(s : java.lang.String) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + formatValue(o : java.lang.Object) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> - parseArray(tokenizer : pfc.utilities.JsonUtilities.JsonScanner) : java.lang.Iterable&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + parseArray(json : java.lang.String) : java.lang.Iterable&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> - parseColor(json : java.lang.String) : java.awt.Color </td></tr>
<tr><td align="left" balign="left"> - parseObject(tokenizer : pfc.utilities.JsonUtilities.JsonScanner) : java.util.Map&lt;java.lang.String, java.lang.Object&gt; </td></tr>
<tr><td align="left" balign="left"> + parseObject(json : java.lang.String) : java.util.Map&lt;java.lang.String, java.lang.Object&gt; </td></tr>
<tr><td align="left" balign="left"> + parseString(json : java.lang.String) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + parseValue(json : java.lang.String) : java.lang.Object </td></tr>
		</table></td></tr>
		</table>>, URL="../../../utilities/JsonUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	//pfc.models.Edge extends pfc.models.ObservableModel
	c7260:p -> c7264:p [dir=back,arrowtail=empty];
	//pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm extends pfc.models.ObservableModel
	c7260:p -> c7271:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm NAVASSOC pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c7271:p -> c7273:p [taillabel="", label="", headlabel="-visibility", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.models.Edge
	c7271:p -> c7264:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c7271:p -> c7295:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c7271:p -> c7289:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm extends pfc.models.ObservableModel
	c7260:p -> c7273:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm NAVASSOC pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c7273:p -> c7289:p [taillabel="", label="", headlabel="-drawing", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm DEPEND pfc.models.Edge
	c7273:p -> c7264:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c7273:p -> c7295:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.orthogonal.OrthogonalAlgorithm extends pfc.models.ObservableModel
	c7260:p -> c7276:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm NAVASSOC pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c7276:p -> c7273:p [taillabel="", label="", headlabel="-visibility", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.Edge
	c7276:p -> c7264:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c7276:p -> c7295:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c7276:p -> c7289:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.polyline.UpwardPolylineAlgorithm extends pfc.models.ObservableModel
	c7260:p -> c7279:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.Edge
	c7279:p -> c7264:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c7279:p -> c7295:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c7279:p -> c7289:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing extends pfc.models.ObservableModel
	c7260:p -> c7289:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing NAVASSOC pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c7289:p -> c7295:p [taillabel="", label="", headlabel="*\n-edgeSegments", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing DEPEND pfc.utilities.JsonUtilities
	c7289:p -> c7308:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.visibilityrepresentation.EdgeSegment extends pfc.models.ObservableModel
	c7260:p -> c7295:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.visibilityrepresentation.EdgeSegment NAVASSOC pfc.models.Edge
	c7295:p -> c7264:p [taillabel="", label="", headlabel="*\n-edge", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.visibilityrepresentation.EdgeSegment DEPEND pfc.utilities.JsonUtilities
	c7295:p -> c7308:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

