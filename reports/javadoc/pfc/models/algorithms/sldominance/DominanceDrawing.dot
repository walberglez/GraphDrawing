#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.ObservableModel
	c5896 [label=<<table title="pfc.models.ObservableModel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../ObservableModel.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ObservableModel </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ObservableModel() </td></tr>
		</table></td></tr>
		</table>>, URL="../../ObservableModel.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Graph
	c5899 [label=<<table title="pfc.models.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Graph </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + name : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + vertices : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + edges : java.util.List&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + areLoopsAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areMultipleEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areDirectedEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areCyclesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> - incidences : java.util.Map&lt;pfc.models.Vertex, java.util.Set&lt;pfc.models.Edge&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - newLabelAvailable : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Graph() </td></tr>
<tr><td align="left" balign="left"> + Graph(attributes : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Graph(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + Graph(name : java.lang.String, areLoopsAllowed : boolean, areDirectedEdgesAllowed : boolean, areMultipleEdgesAllowed : boolean, areCyclesAllowed : boolean) </td></tr>
<tr><td align="left" balign="left"> + areConnected(from : pfc.models.Vertex, to : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdges(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges(from : pfc.models.Vertex, to : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesFrom(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesTo(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighbors(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsIn(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsOut(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsInOut(vertex : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedEdges() : java.util.List&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedVertices() : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + hasSelectedEdges() : boolean </td></tr>
<tr><td align="left" balign="left"> + hasSelectedVertices() : boolean </td></tr>
<tr><td align="left" balign="left"> + selectAll(select : boolean) </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + translateSelected(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + union(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + setNewVertexLabelAvailable(newVertex : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + getNewLabelAvailable() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getVertexSource() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexTarget() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../Graph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm
	c5918 [label=<<table title="pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../polylinedominance/PolylineDominanceAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PolylineDominanceAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.polylinedominance </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - slDominance : pfc.models.algorithms.sldominance.SLDominanceAlgorithm </td></tr>
<tr><td align="left" balign="left"> - reduced : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - dummyVertices : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + PolylineDominanceAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getDominanceDrawing() : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> + getReduced() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - makeGraphReduced() </td></tr>
<tr><td align="left" balign="left"> - insertDummyVertex(e : pfc.models.Edge) </td></tr>
<tr><td align="left" balign="left"> - constructSLDominanceDrawing() </td></tr>
<tr><td align="left" balign="left"> - turnDummyVerticesIntoBends() </td></tr>
		</table></td></tr>
		</table>>, URL="../polylinedominance/PolylineDominanceAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm
	c5921 [label=<<table title="pfc.models.algorithms.sldominance.SLDominanceAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SLDominanceAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SLDominanceAlgorithm </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - dominance : Graph </td></tr>
<tr><td align="left" balign="left"> - drawing : DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> - rotationsOut : Map&lt;Vertex, Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - rotationsIn : Map&lt;Vertex, Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - step : SLDominanceAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : Observer </td></tr>
<tr><td align="left" balign="left"> - count : Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SLDominanceAlgorithm(stGraphG : Graph) </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - preprocessGraph() </td></tr>
<tr><td align="left" balign="left"> - nextOut(v : Vertex, n : Vertex) : Edge </td></tr>
<tr><td align="left" balign="left"> - predOut(v : Vertex, n : Vertex) : Edge </td></tr>
<tr><td align="left" balign="left"> - firstOut(v : Vertex) : Edge </td></tr>
<tr><td align="left" balign="left"> - lastOut(v : Vertex) : Edge </td></tr>
<tr><td align="left" balign="left"> - firstIn(v : Vertex) : Edge </td></tr>
<tr><td align="left" balign="left"> - lastIn(v : Vertex) : Edge </td></tr>
<tr><td align="left" balign="left"> - assignPreliminaryCoordinates() </td></tr>
<tr><td align="left" balign="left"> - labelX(v : Vertex) </td></tr>
<tr><td align="left" balign="left"> - labelY(v : Vertex) </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinates() </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinatesX() </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinatesY() </td></tr>
<tr><td align="left" balign="left"> - initXCoordinateVertices() : TreeSet&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - initYCoordinateVertices() : TreeSet&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - equalsDegreeInOut(u : Vertex, v : Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./SLDominanceAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.sldominance.DominanceDrawing
	c5923 [label=<<table title="pfc.models.algorithms.sldominance.DominanceDrawing" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./DominanceDrawing.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DominanceDrawing </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - graph : Graph </td></tr>
<tr><td align="left" balign="left"> - elementObserver : Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - maxX : Integer </td></tr>
<tr><td align="left" balign="left"> - maxY : Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DominanceDrawing(areLoopsAllowed : boolean, areDirectedEdgesAllowed : boolean, areMultipleEdgesAllowed : boolean, areCyclesAllowed : boolean) </td></tr>
<tr><td align="left" balign="left"> + DominanceDrawing(graph : Graph) </td></tr>
<tr><td align="left" balign="left"> + DominanceDrawing(attributes : Map&lt;String, Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + DominanceDrawing(json : String) </td></tr>
<tr><td align="left" balign="left"> + getGraph() : Graph </td></tr>
<tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMaxXCoordinate() : Integer </td></tr>
<tr><td align="left" balign="left"> + getMaxYCoordinate() : Integer </td></tr>
<tr><td align="left" balign="left"> - setMaxCoordinates() </td></tr>
		</table></td></tr>
		</table>>, URL="./DominanceDrawing.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.JsonUtilities
	c5944 [label=<<table title="pfc.utilities.JsonUtilities" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../../utilities/JsonUtilities.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> JsonUtilities </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + JsonUtilities() </td></tr>
<tr><td align="left" balign="left"> + formatArray(i : java.lang.Iterable&lt;?&gt;) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> - formatColor(color : java.awt.Color) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + formatObject(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + formatString(s : java.lang.String) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + formatValue(o : java.lang.Object) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> - parseArray(tokenizer : pfc.utilities.JsonUtilities.JsonScanner) : java.lang.Iterable&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + parseArray(json : java.lang.String) : java.lang.Iterable&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> - parseColor(json : java.lang.String) : java.awt.Color </td></tr>
<tr><td align="left" balign="left"> - parseObject(tokenizer : pfc.utilities.JsonUtilities.JsonScanner) : java.util.Map&lt;java.lang.String, java.lang.Object&gt; </td></tr>
<tr><td align="left" balign="left"> + parseObject(json : java.lang.String) : java.util.Map&lt;java.lang.String, java.lang.Object&gt; </td></tr>
<tr><td align="left" balign="left"> + parseString(json : java.lang.String) : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + parseValue(json : java.lang.String) : java.lang.Object </td></tr>
		</table></td></tr>
		</table>>, URL="../../../utilities/JsonUtilities.html", fontname="arial", fontcolor="black", fontsize=9.0];
	//pfc.models.Graph extends pfc.models.ObservableModel
	c5896:p -> c5899:p [dir=back,arrowtail=empty];
	//pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm extends pfc.models.ObservableModel
	c5896:p -> c5918:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm NAVASSOC pfc.models.algorithms.sldominance.SLDominanceAlgorithm
	c5918:p -> c5921:p [taillabel="", label="", headlabel="-slDominance", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm NAVASSOC pfc.models.Graph
	c5918:p -> c5899:p [taillabel="", label="", headlabel="-reduced", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm DEPEND pfc.models.algorithms.sldominance.DominanceDrawing
	c5918:p -> c5923:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.sldominance.SLDominanceAlgorithm extends pfc.models.ObservableModel
	c5896:p -> c5921:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm NAVASSOC pfc.models.Graph
	c5921:p -> c5899:p [taillabel="", label="", headlabel="-dominance", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm NAVASSOC pfc.models.algorithms.sldominance.DominanceDrawing
	c5921:p -> c5923:p [taillabel="", label="", headlabel="-drawing", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.sldominance.DominanceDrawing extends pfc.models.ObservableModel
	c5896:p -> c5923:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.sldominance.DominanceDrawing NAVASSOC pfc.models.Graph
	c5923:p -> c5899:p [taillabel="", label="", headlabel="-graph", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.sldominance.DominanceDrawing DEPEND pfc.utilities.JsonUtilities
	c5923:p -> c5944:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

