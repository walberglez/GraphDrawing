#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithmHistory
	c1424 [label=<<table title="pfc.models.algorithms.orthogonal.OrthogonalAlgorithmHistory" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./OrthogonalAlgorithmHistory.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrthogonalAlgorithmHistory </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - digraph : String </td></tr>
<tr><td align="left" balign="left"> - visibilityDrawing : String </td></tr>
<tr><td align="left" balign="left"> - orthogonalGraph : String </td></tr>
<tr><td align="left" balign="left"> - explanation : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + OrthogonalAlgorithmHistory() </td></tr>
<tr><td align="left" balign="left"> + OrthogonalAlgorithmHistory(digraph : String, visibilityDrawing : String, orthogonalGraph : String, explanation : String) </td></tr>
<tr><td align="left" balign="left"> + getDigraph() : String </td></tr>
<tr><td align="left" balign="left"> + setDigraph(digraph : String) </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : String </td></tr>
<tr><td align="left" balign="left"> + setVisibilityDrawing(visibilityDrawing : String) </td></tr>
<tr><td align="left" balign="left"> + getOrthogonalGraph() : String </td></tr>
<tr><td align="left" balign="left"> + setOrthogonalGraph(orthogonalGraph : String) </td></tr>
<tr><td align="left" balign="left"> + getExplanation() : String </td></tr>
<tr><td align="left" balign="left"> + setExplanation(explanation : String) </td></tr>
		</table></td></tr>
		</table>>, URL="./OrthogonalAlgorithmHistory.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm
	c1425 [label=<<table title="pfc.models.algorithms.orthogonal.OrthogonalAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./OrthogonalAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrthogonalAlgorithm </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - orthogonal : Graph </td></tr>
<tr><td align="left" balign="left"> - digraph : Graph </td></tr>
<tr><td align="left" balign="left"> - paths : NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - pathToVertices : Map&lt;DirectedPath, Set&lt;Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - visibility : ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - step : OrthogonalAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + OrthogonalAlgorithm(graph : Graph) </td></tr>
<tr><td align="left" balign="left"> + getOrthogonal() : Graph </td></tr>
<tr><td align="left" balign="left"> + getDigraph() : Graph </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - orientGraph() </td></tr>
<tr><td align="left" balign="left"> - selectPaths() </td></tr>
<tr><td align="left" balign="left"> - createPath(v : Vertex) : DirectedPath </td></tr>
<tr><td align="left" balign="left"> - getLeftmostIncomingEdge(v : Vertex, in : Set&lt;Edge&gt;, out : Set&lt;Edge&gt;) : Edge </td></tr>
<tr><td align="left" balign="left"> - getRightmostOutcomingEdge(v : Vertex, in : Set&lt;Edge&gt;, out : Set&lt;Edge&gt;) : Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianIncomingEdge(v : Vertex, in : Set&lt;Edge&gt;, out : Set&lt;Edge&gt;) : Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianOutcomingEdge(v : Vertex, in : Set&lt;Edge&gt;, out : Set&lt;Edge&gt;) : Edge </td></tr>
<tr><td align="left" balign="left"> - getNeighborsIn(in : Set&lt;Edge&gt;) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - getNeighborsOut(out : Set&lt;Edge&gt;) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - joinPaths(allPaths : List&lt;DirectedPath&gt;, path : DirectedPath) </td></tr>
<tr><td align="left" balign="left"> - executeVisibility() </td></tr>
<tr><td align="left" balign="left"> - constructVertices() </td></tr>
<tr><td align="left" balign="left"> - getPositioning(vS : VertexSegment, neighbors : Set&lt;Edge&gt;) : Point2D </td></tr>
<tr><td align="left" balign="left"> - getSTAxeXCoordinate(neighbors : Set&lt;Edge&gt;) : int </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : VertexSegment) : Point2D </td></tr>
<tr><td align="left" balign="left"> - getAssociatedPath(v : Vertex) : DirectedPath </td></tr>
<tr><td align="left" balign="left"> - constructEdges() </td></tr>
<tr><td align="left" balign="left"> - calculateBends(e : Edge, newE : Edge) : List&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : EdgeSegment) : Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : EdgeSegment) : Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendFromSTPositioning(eS : EdgeSegment, despl : int) : Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToSTPositioning(eS : EdgeSegment, despl : int) : Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendSourcePositioning(s : Vertex, despl : int) : Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendTargetPositioning(t : Vertex, despl : int) : Point2D </td></tr>
<tr><td align="left" balign="left"> - isProblematicSTEdge(eS : EdgeSegment, st : Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./OrthogonalAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm.Step
	c1426 [label=<<table title="pfc.models.algorithms.orthogonal.OrthogonalAlgorithm.Step" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./OrthogonalAlgorithm.Step.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> Step </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ORIENTATION </td></tr>
<tr><td align="left" balign="left"> PATHS </td></tr>
<tr><td align="left" balign="left"> VISIBILITY </td></tr>
<tr><td align="left" balign="left"> VERTICES </td></tr>
<tr><td align="left" balign="left"> EDGES </td></tr>
		</table></td></tr>
		</table>>, URL="./OrthogonalAlgorithm.Step.html", fontname="arial", fontcolor="black", fontsize=9.0];
}

