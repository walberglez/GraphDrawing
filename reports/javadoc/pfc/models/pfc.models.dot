#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.Vertex
	c912 [label=<<table title="pfc.models.Vertex" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Vertex.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Vertex </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + id : ObservableModel.Property&lt;UUID&gt; </td></tr>
<tr><td align="left" balign="left"> + x : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + y : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + label : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + radius : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : ObservableModel.Property&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : ObservableModel.Property&lt;Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + weight : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : ObservableModel.Property&lt;String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Vertex() </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : String) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : String, radius : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : String, radius : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : String, radius : double, color : int, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Vertex(members : Map&lt;String, Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Vertex(json : String) </td></tr>
<tr><td align="left" balign="left"> + getPoint2D() : Point2D </td></tr>
<tr><td align="left" balign="left"> + isIncident(edge : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Vertex.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.ObservableModel
	c913 [label=<<table title="pfc.models.ObservableModel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ObservableModel.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ObservableModel </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ObservableModel() </td></tr>
		</table></td></tr>
		</table>>, URL="./ObservableModel.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.ObservableModel.Property<T>
	c914 [label=<<table title="pfc.models.ObservableModel.Property" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ObservableModel.Property.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Property&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - value : T </td></tr>
<tr><td align="left" balign="left"> - defaultValue : T </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - valueObserver : Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ObservableModel.Property(defaultValue : T) </td></tr>
<tr><td align="left" balign="left"> + get() : T </td></tr>
<tr><td align="left" balign="left"> + getDefault() : T </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + set(value : T) </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./ObservableModel.Property.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.ObservableList<T>
	c915 [label=<<table title="pfc.models.ObservableList" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ObservableList.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ObservableList&lt;T&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - list : List&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - elementObserver : Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ObservableList() </td></tr>
<tr><td align="left" balign="left"> + add(location : int, object : T) </td></tr>
<tr><td align="left" balign="left"> + add(object : T) : boolean </td></tr>
<tr><td align="left" balign="left"> + addAll(collection : Collection&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + addAll(location : int, collection : Collection&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + contains(object : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAll(collection : Collection&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + get(location : int) : T </td></tr>
<tr><td align="left" balign="left"> + indexOf(object : Object) : int </td></tr>
<tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr>
<tr><td align="left" balign="left"> + iterator() : Iterator&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + lastIndexOf(object : Object) : int </td></tr>
<tr><td align="left" balign="left"> + listIterator() : ListIterator&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + listIterator(location : int) : ListIterator&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + remove(location : int) : T </td></tr>
<tr><td align="left" balign="left"> + remove(object : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeAll(collection : Collection&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + retainAll(collection : Collection&lt;?&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + set(location : int, object : T) : T </td></tr>
<tr><td align="left" balign="left"> + size() : int </td></tr>
<tr><td align="left" balign="left"> + subList(start : int, end : int) : List&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toArray() : Object[] </td></tr>
<tr><td align="left" balign="left"> + toArray(array : T[]) : T[] </td></tr>
		</table></td></tr>
		</table>>, URL="./ObservableList.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Graph
	c916 [label=<<table title="pfc.models.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Graph </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + name : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + vertices : List&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + edges : List&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + areLoopsAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areMultipleEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areDirectedEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areCyclesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> - incidences : Map&lt;Vertex, Set&lt;Edge&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - elementObserver : Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - newLabelAvailable : Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Graph() </td></tr>
<tr><td align="left" balign="left"> + Graph(attributes : Map&lt;String, Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Graph(json : String) </td></tr>
<tr><td align="left" balign="left"> + Graph(name : String, areLoopsAllowed : boolean, areDirectedEdgesAllowed : boolean, areMultipleEdgesAllowed : boolean, areCyclesAllowed : boolean) </td></tr>
<tr><td align="left" balign="left"> + areConnected(from : Vertex, to : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdges(vertex : Vertex) : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges(from : Vertex, to : Vertex) : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesFrom(vertex : Vertex) : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesTo(vertex : Vertex) : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighbors(vertex : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsIn(vertex : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsOut(vertex : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsInOut(vertex : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedEdges() : List&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedVertices() : List&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + hasSelectedEdges() : boolean </td></tr>
<tr><td align="left" balign="left"> + hasSelectedVertices() : boolean </td></tr>
<tr><td align="left" balign="left"> + selectAll(select : boolean) </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + translateSelected(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + union(graph : Graph) </td></tr>
<tr><td align="left" balign="left"> + setNewVertexLabelAvailable(newVertex : Vertex) </td></tr>
<tr><td align="left" balign="left"> + getNewLabelAvailable() : String </td></tr>
<tr><td align="left" balign="left"> + getVertexSource() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexTarget() : Vertex </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Graph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Edge
	c917 [label=<<table title="pfc.models.Edge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Edge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Edge </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isDirected : boolean </td></tr>
<tr><td align="left" balign="left"> + from : Vertex </td></tr>
<tr><td align="left" balign="left"> + to : Vertex </td></tr>
<tr><td align="left" balign="left"> + isLoop : boolean </td></tr>
<tr><td align="left" balign="left"> + weight : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : ObservableModel.Property&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + label : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : ObservableModel.Property&lt;Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + thickness : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleX : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleY : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> - arc : Arc2D.Double </td></tr>
<tr><td align="left" balign="left"> - line : Line2D.Double </td></tr>
<tr><td align="left" balign="left"> - center : Point2D.Double </td></tr>
<tr><td align="left" balign="left"> - bends : List&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - isLinear : boolean </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - vertexObserver : Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex, weight : double) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex, weight : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex, weight : double, color : int, label : String) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex, weight : double, color : int, label : String, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Edge(members : Map&lt;String, Object&gt;, vertices : Map&lt;String, Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Edge(json : String, vertices : Map&lt;String, Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + getArc() : Arc2D </td></tr>
<tr><td align="left" balign="left"> + getCenter() : Point2D </td></tr>
<tr><td align="left" balign="left"> + getHandlePoint2D() : Point2D </td></tr>
<tr><td align="left" balign="left"> + getLine() : Line2D </td></tr>
<tr><td align="left" balign="left"> + getBends() : List&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getTotalOfBends() : int </td></tr>
<tr><td align="left" balign="left"> + setBends(bends : List&lt;Point2D&gt;) </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(edge : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + isIncident(vertex : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + isLinear() : boolean </td></tr>
<tr><td align="left" balign="left"> + isPolyline() : boolean </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateArc() </td></tr>
<tr><td align="left" balign="left"> - updateCenter() </td></tr>
		</table></td></tr>
		</table>>, URL="./Edge.html", fontname="arial", fontcolor="black", fontsize=9.0];
	//pfc.models.Vertex extends pfc.models.ObservableModel
	c913:p -> c912:p [dir=back,arrowtail=empty];
	//pfc.models.Graph extends pfc.models.ObservableModel
	c913:p -> c916:p [dir=back,arrowtail=empty];
	// pfc.models.Graph NAVASSOC pfc.models.Vertex
	c916:p -> c912:p [taillabel="", label="", headlabel="*\n-vertices", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Graph NAVASSOC pfc.models.Edge
	c916:p -> c917:p [taillabel="", label="", headlabel="*\n-edges", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.Edge extends pfc.models.ObservableModel
	c913:p -> c917:p [dir=back,arrowtail=empty];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c917:p -> c912:p [taillabel="", label="", headlabel="*\n-to", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c917:p -> c912:p [taillabel="", label="", headlabel="*\n-from", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

