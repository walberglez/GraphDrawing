#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.Vertex
	c11354 [label=<<table title="pfc.models.Vertex" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Vertex.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Vertex </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + id : ObservableModel.Property&lt;UUID&gt; </td></tr>
<tr><td align="left" balign="left"> + x : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + y : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + label : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + radius : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : ObservableModel.Property&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : ObservableModel.Property&lt;Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + weight : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : ObservableModel.Property&lt;String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Vertex() </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : String) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : String, radius : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : String, radius : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : String, radius : double, color : int, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Vertex(members : Map&lt;String, Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Vertex(json : String) </td></tr>
<tr><td align="left" balign="left"> + getPoint2D() : Point2D </td></tr>
<tr><td align="left" balign="left"> + isIncident(edge : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Vertex.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.ObservableModel
	c11355 [label=<<table title="pfc.models.ObservableModel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./ObservableModel.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ObservableModel </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ObservableModel() </td></tr>
		</table></td></tr>
		</table>>, URL="./ObservableModel.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Graph
	c11358 [label=<<table title="pfc.models.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Graph </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + name : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + vertices : List&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + edges : List&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + areLoopsAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areMultipleEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areDirectedEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areCyclesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> - incidences : Map&lt;Vertex, Set&lt;Edge&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - elementObserver : Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - newLabelAvailable : Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Graph() </td></tr>
<tr><td align="left" balign="left"> + Graph(attributes : Map&lt;String, Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Graph(json : String) </td></tr>
<tr><td align="left" balign="left"> + Graph(name : String, areLoopsAllowed : boolean, areDirectedEdgesAllowed : boolean, areMultipleEdgesAllowed : boolean, areCyclesAllowed : boolean) </td></tr>
<tr><td align="left" balign="left"> + areConnected(from : Vertex, to : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdges(vertex : Vertex) : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges(from : Vertex, to : Vertex) : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesFrom(vertex : Vertex) : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesTo(vertex : Vertex) : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighbors(vertex : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsIn(vertex : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsOut(vertex : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsInOut(vertex : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedEdges() : List&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedVertices() : List&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + hasSelectedEdges() : boolean </td></tr>
<tr><td align="left" balign="left"> + hasSelectedVertices() : boolean </td></tr>
<tr><td align="left" balign="left"> + selectAll(select : boolean) </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + translateSelected(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + union(graph : Graph) </td></tr>
<tr><td align="left" balign="left"> + setNewVertexLabelAvailable(newVertex : Vertex) </td></tr>
<tr><td align="left" balign="left"> + getNewLabelAvailable() : String </td></tr>
<tr><td align="left" balign="left"> + getVertexSource() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexTarget() : Vertex </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Graph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Edge
	c11359 [label=<<table title="pfc.models.Edge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Edge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Edge </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isDirected : boolean </td></tr>
<tr><td align="left" balign="left"> + from : Vertex </td></tr>
<tr><td align="left" balign="left"> + to : Vertex </td></tr>
<tr><td align="left" balign="left"> + isLoop : boolean </td></tr>
<tr><td align="left" balign="left"> + weight : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : ObservableModel.Property&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + label : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : ObservableModel.Property&lt;Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + thickness : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleX : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleY : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> - arc : Arc2D.Double </td></tr>
<tr><td align="left" balign="left"> - line : Line2D.Double </td></tr>
<tr><td align="left" balign="left"> - center : Point2D.Double </td></tr>
<tr><td align="left" balign="left"> - bends : List&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - isLinear : boolean </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - vertexObserver : Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex, weight : double) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex, weight : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex, weight : double, color : int, label : String) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex, weight : double, color : int, label : String, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Edge(members : Map&lt;String, Object&gt;, vertices : Map&lt;String, Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Edge(json : String, vertices : Map&lt;String, Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + getArc() : Arc2D </td></tr>
<tr><td align="left" balign="left"> + getCenter() : Point2D </td></tr>
<tr><td align="left" balign="left"> + getHandlePoint2D() : Point2D </td></tr>
<tr><td align="left" balign="left"> + getLine() : Line2D </td></tr>
<tr><td align="left" balign="left"> + getBends() : List&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getTotalOfBends() : int </td></tr>
<tr><td align="left" balign="left"> + setBends(bends : List&lt;Point2D&gt;) </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(edge : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + isIncident(vertex : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + isLinear() : boolean </td></tr>
<tr><td align="left" balign="left"> + isPolyline() : boolean </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateArc() </td></tr>
<tr><td align="left" balign="left"> - updateCenter() </td></tr>
		</table></td></tr>
		</table>>, URL="./Edge.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm
	c11366 [label=<<table title="pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/constrainedpolyline/ConstrainedPolylineAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConstrainedPolylineAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.constrainedpolyline </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - polyline : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ConstrainedPolylineAlgorithm(stGraphG : pfc.models.Graph, paths : pfc.models.algorithms.NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getPolyline() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getLongEdgePositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getMedianPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, path : pfc.models.algorithms.DirectedPath) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/constrainedpolyline/ConstrainedPolylineAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c11368 [label=<<table title="pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/constrainedvisrep/ConstrainedVisRepAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.constrainedvisrep </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - stDualG : pfc.models.algorithms.DualPathGraph </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ConstrainedVisRepAlgorithm(stGraphG : pfc.models.Graph, paths : pfc.models.algorithms.NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + getStDualG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getStGraphG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingY() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingX() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + numberY(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + numberX(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + getPathFace(path : pfc.models.algorithms.DirectedPath) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getNumberXPaths(v : pfc.models.Vertex) : java.util.List&lt;java.lang.Integer&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/constrainedvisrep/ConstrainedVisRepAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm
	c11371 [label=<<table title="pfc.models.algorithms.orthogonal.OrthogonalAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/orthogonal/OrthogonalAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrthogonalAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.orthogonal </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - orthogonal : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - digraph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - pathToVertices : java.util.Map&lt;pfc.models.algorithms.DirectedPath, java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.orthogonal.OrthogonalAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + OrthogonalAlgorithm(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getOrthogonal() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getDigraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - orientGraph() </td></tr>
<tr><td align="left" balign="left"> - selectPaths() </td></tr>
<tr><td align="left" balign="left"> - createPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - getLeftmostIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getRightmostOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getNeighborsIn(in : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - getNeighborsOut(out : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - joinPaths(allPaths : java.util.List&lt;pfc.models.algorithms.DirectedPath&gt;, path : pfc.models.algorithms.DirectedPath) </td></tr>
<tr><td align="left" balign="left"> - executeVisibility() </td></tr>
<tr><td align="left" balign="left"> - constructVertices() </td></tr>
<tr><td align="left" balign="left"> - getPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getSTAxeXCoordinate(neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : int </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getAssociatedPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - constructEdges() </td></tr>
<tr><td align="left" balign="left"> - calculateBends(e : pfc.models.Edge, newE : pfc.models.Edge) : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendFromSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendSourcePositioning(s : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendTargetPositioning(t : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - isProblematicSTEdge(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, st : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/orthogonal/OrthogonalAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm
	c11374 [label=<<table title="pfc.models.algorithms.polyline.UpwardPolylineAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/polyline/UpwardPolylineAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UpwardPolylineAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.polyline </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm </td></tr>
<tr><td align="left" balign="left"> - polyline : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.polyline.UpwardPolylineAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UpwardPolylineAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getPolyline() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - getLongEdgePositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getMedianPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/polyline/UpwardPolylineAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm
	c11377 [label=<<table title="pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/polylinedominance/PolylineDominanceAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PolylineDominanceAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.polylinedominance </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - slDominance : pfc.models.algorithms.sldominance.SLDominanceAlgorithm </td></tr>
<tr><td align="left" balign="left"> - reduced : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - dummyVertices : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + PolylineDominanceAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getDominanceDrawing() : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> + getReduced() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - makeGraphReduced() </td></tr>
<tr><td align="left" balign="left"> - insertDummyVertex(e : pfc.models.Edge) </td></tr>
<tr><td align="left" balign="left"> - constructSLDominanceDrawing() </td></tr>
<tr><td align="left" balign="left"> - turnDummyVerticesIntoBends() </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/polylinedominance/PolylineDominanceAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm
	c11380 [label=<<table title="pfc.models.algorithms.sldominance.SLDominanceAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/sldominance/SLDominanceAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SLDominanceAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.sldominance </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - dominance : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> - rotationsOut : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - rotationsIn : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.sldominance.SLDominanceAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - count : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SLDominanceAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - preprocessGraph() </td></tr>
<tr><td align="left" balign="left"> - nextOut(v : pfc.models.Vertex, n : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - predOut(v : pfc.models.Vertex, n : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - firstOut(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - lastOut(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - firstIn(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - lastIn(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - assignPreliminaryCoordinates() </td></tr>
<tr><td align="left" balign="left"> - labelX(v : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - labelY(v : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinates() </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinatesX() </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinatesY() </td></tr>
<tr><td align="left" balign="left"> - initXCoordinateVertices() : java.util.TreeSet&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - initYCoordinateVertices() : java.util.TreeSet&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - equalsDegreeInOut(u : pfc.models.Vertex, v : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/sldominance/SLDominanceAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.sldominance.DominanceDrawing
	c11382 [label=<<table title="pfc.models.algorithms.sldominance.DominanceDrawing" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/sldominance/DominanceDrawing.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DominanceDrawing </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.sldominance </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - graph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - maxX : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - maxY : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DominanceDrawing(areLoopsAllowed : boolean, areDirectedEdgesAllowed : boolean, areMultipleEdgesAllowed : boolean, areCyclesAllowed : boolean) </td></tr>
<tr><td align="left" balign="left"> + DominanceDrawing(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + DominanceDrawing(attributes : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + DominanceDrawing(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + getGraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMaxXCoordinate() : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + getMaxYCoordinate() : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - setMaxCoordinates() </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/sldominance/DominanceDrawing.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c11384 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/visibilityrepresentation/VisibilityRepresentationDrawing.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VisibilityRepresentationDrawing </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + vertexSegments : java.util.List&lt;pfc.models.algorithms.visibilityrepresentation.VertexSegment&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeSegments : java.util.List&lt;pfc.models.algorithms.visibilityrepresentation.EdgeSegment&gt; </td></tr>
<tr><td align="left" balign="left"> - vertexToSegment : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.visibilityrepresentation.VertexSegment&gt; </td></tr>
<tr><td align="left" balign="left"> - edgeToSegment : java.util.Map&lt;pfc.models.Edge, pfc.models.algorithms.visibilityrepresentation.EdgeSegment&gt; </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - maxX : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - maxY : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VisibilityRepresentationDrawing() </td></tr>
<tr><td align="left" balign="left"> + VisibilityRepresentationDrawing(attributes : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + VisibilityRepresentationDrawing(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + getVertexSegment(v : pfc.models.Vertex) : pfc.models.algorithms.visibilityrepresentation.VertexSegment </td></tr>
<tr><td align="left" balign="left"> + getEdgeSegment(e : pfc.models.Edge) : pfc.models.algorithms.visibilityrepresentation.EdgeSegment </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMaxXCoordinate() : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + getMaxYCoordinate() : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - setMaxCoordinates() </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/visibilityrepresentation/VisibilityRepresentationDrawing.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm
	c11387 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/visibilityrepresentation/VisibilityRepresentationAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VisibilityRepresentationAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - stDualG : pfc.models.algorithms.DualGraph </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VisibilityRepresentationAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getStDualG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getStGraphG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingY() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingX() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX() </td></tr>
<tr><td align="left" balign="left"> - numberY(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - numberX(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/visibilityrepresentation/VisibilityRepresentationAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c11389 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.VertexSegment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/visibilityrepresentation/VertexSegment.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VertexSegment </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + yCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + xLeftCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + xRightCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + vertex : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + id : pfc.models.ObservableModel.Property&lt;java.util.UUID&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VertexSegment() </td></tr>
<tr><td align="left" balign="left"> + VertexSegment(yCoordinate : java.lang.Integer, xLeftCoordinate : java.lang.Integer, xRightCoordinate : java.lang.Integer) </td></tr>
<tr><td align="left" balign="left"> + VertexSegment(yCoordinate : java.lang.Integer, xLeftCoordinate : java.lang.Integer, xRightCoordinate : java.lang.Integer, vertex : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + VertexSegment(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + VertexSegment(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/visibilityrepresentation/VertexSegment.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c11390 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.EdgeSegment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/visibilityrepresentation/EdgeSegment.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EdgeSegment </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + xCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + yBottomCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + yTopCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + edge : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> + id : pfc.models.ObservableModel.Property&lt;java.util.UUID&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EdgeSegment() </td></tr>
<tr><td align="left" balign="left"> + EdgeSegment(xCoordinate : java.lang.Integer, yBottomCoordinate : java.lang.Integer, yTopCoordinate : java.lang.Integer) </td></tr>
<tr><td align="left" balign="left"> + EdgeSegment(xCoordinate : java.lang.Integer, yBottomCoordinate : java.lang.Integer, yTopCoordinate : java.lang.Integer, edge : pfc.models.Edge) </td></tr>
<tr><td align="left" balign="left"> + EdgeSegment(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + EdgeSegment(json : java.lang.String, vertices : java.util.Map&lt;java.lang.String, pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + isShortEdge() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/visibilityrepresentation/EdgeSegment.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.settings.UserSettings
	c11395 [label=<<table title="pfc.settings.UserSettings" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../settings/UserSettings.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UserSettings </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.settings </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + instance : pfc.settings.UserSettings </td></tr>
<tr><td align="left" balign="left"> + defaultVertexWeight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultVertexColor : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultVertexPrefix : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultVertexRadius : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultVertexIsSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultEdgeWeight : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultEdgeColor : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultEdgePrefix : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultEdgeThickness : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultEdgeHandleRadiusRatio : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultLoopDiameter : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultEdgeIsSelected : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultShowVertexWeights : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultShowVertexLabels : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultShowEdgeHandles : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultShowEdgeWeights : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultShowEdgeLabels : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + graphBackground : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + selectionBoxFill : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + selectionBoxLine : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + vertexLine : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + selectedVertexFill : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + selectedVertexLine : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + draggingEdge : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeHandle : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + selectedEdge : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + selectedEdgeHandle : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + uncoloredEdgeLine : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + uncoloredDualEdgeLine : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + uncoloredVertexFill : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + uncoloredDualVertexFill : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + vertexLabelColor : pfc.models.ObservableModel.Property&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + elementColors : pfc.models.ObservableList&lt;java.awt.Color&gt; </td></tr>
<tr><td align="left" balign="left"> + vertexClickMargin : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeHandleClickMargin : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + panDecelerationFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + panOnDoubleClick : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + deselectVertexWithNewEdge : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + zoomInFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + zoomOutFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + maximumZoomFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + zoomGraphPadding : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + scrollIncrementZoom : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + arrangeCircleRadiusMultiplier : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + arrangeGridSpacing : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + autoArrangeAttractiveForce : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + autoArrangeRepulsiveForce : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + autoArrangeDecelerationFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + arrangeContractFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + arrangeExpandFactor : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + undoLoggingInterval : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + undoLoggingMaximum : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + useAntiAliasing : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + usePureStroke : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + useBicubicInterpolation : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + useFractionalMetrics : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + vertexWeightPrecision : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeWeightPrecision : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + mainWindowWidth : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + mainWindowHeight : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + scriptLibraryWindowWidth : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + scriptLibraryWindowHeight : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + graphWindowWidth : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + graphWindowHeight : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + cascadeWindowOffset : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + language : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + defaultGraphName : pfc.models.ObservableModel.Property&lt;java.lang.String&gt; </td></tr>
<tr><td align="left" balign="left"> + directedEdgeArrowRatio : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + arrowKeyIncrement : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + edgeSnapMarginRatio : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + areCloseDistance : pfc.models.ObservableModel.Property&lt;java.lang.Double&gt; </td></tr>
<tr><td align="left" balign="left"> + paintToolMenuDelay : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - UserSettings() </td></tr>
<tr><td align="left" balign="left"> + getVertexColor(i : int) : java.awt.Color </td></tr>
<tr><td align="left" balign="left"> + getEdgeColor(i : int) : java.awt.Color </td></tr>
<tr><td align="left" balign="left"> + fromFile(file : java.io.File) </td></tr>
<tr><td align="left" balign="left"> + fromString(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
		</table></td></tr>
		</table>>, URL="../settings/UserSettings.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.settings.GraphSettings
	c11396 [label=<<table title="pfc.settings.GraphSettings" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../settings/GraphSettings.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GraphSettings </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.settings </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + showEdgeWeights : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + showEdgeLabels : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + showVertexWeights : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + showVertexLabels : pfc.models.ObservableModel.Property&lt;java.lang.Boolean&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GraphSettings() </td></tr>
<tr><td align="left" balign="left"> + GraphSettings(graphSettings : pfc.settings.GraphSettings) </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
		</table></td></tr>
		</table>>, URL="../settings/GraphSettings.html", fontname="arial", fontcolor="black", fontsize=9.0];
	//pfc.models.Vertex extends pfc.models.ObservableModel
	c11355:p -> c11354:p [dir=back,arrowtail=empty];
	//pfc.models.Graph extends pfc.models.ObservableModel
	c11355:p -> c11358:p [dir=back,arrowtail=empty];
	// pfc.models.Graph NAVASSOC pfc.models.Vertex
	c11358:p -> c11354:p [taillabel="", label="", headlabel="*\n-vertices", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Graph NAVASSOC pfc.models.Edge
	c11358:p -> c11359:p [taillabel="", label="", headlabel="*\n-edges", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.Edge extends pfc.models.ObservableModel
	c11355:p -> c11359:p [dir=back,arrowtail=empty];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c11359:p -> c11354:p [taillabel="", label="", headlabel="*\n-to", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c11359:p -> c11354:p [taillabel="", label="", headlabel="*\n-from", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm extends pfc.models.ObservableModel
	c11355:p -> c11366:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm NAVASSOC pfc.models.Graph
	c11366:p -> c11358:p [taillabel="", label="", headlabel="-polyline", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm NAVASSOC pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c11366:p -> c11368:p [taillabel="", label="", headlabel="-visibility", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.models.Edge
	c11366:p -> c11359:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.models.Vertex
	c11366:p -> c11354:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c11366:p -> c11390:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c11366:p -> c11389:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c11366:p -> c11384:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm extends pfc.models.ObservableModel
	c11355:p -> c11368:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm NAVASSOC pfc.models.Graph
	c11368:p -> c11358:p [taillabel="", label="", headlabel="-stGraphG", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm NAVASSOC pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c11368:p -> c11384:p [taillabel="", label="", headlabel="-drawing", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm DEPEND pfc.models.Edge
	c11368:p -> c11359:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm DEPEND pfc.models.Vertex
	c11368:p -> c11354:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c11368:p -> c11390:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c11368:p -> c11389:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.orthogonal.OrthogonalAlgorithm extends pfc.models.ObservableModel
	c11355:p -> c11371:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm NAVASSOC pfc.models.Graph
	c11371:p -> c11358:p [taillabel="", label="", headlabel="-orthogonal", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm NAVASSOC pfc.models.Graph
	c11371:p -> c11358:p [taillabel="", label="", headlabel="-digraph", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm NAVASSOC pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c11371:p -> c11368:p [taillabel="", label="", headlabel="-visibility", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.Edge
	c11371:p -> c11359:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.Vertex
	c11371:p -> c11354:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c11371:p -> c11390:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c11371:p -> c11389:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c11371:p -> c11384:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.polyline.UpwardPolylineAlgorithm extends pfc.models.ObservableModel
	c11355:p -> c11374:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm NAVASSOC pfc.models.Graph
	c11374:p -> c11358:p [taillabel="", label="", headlabel="-polyline", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm NAVASSOC pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm
	c11374:p -> c11387:p [taillabel="", label="", headlabel="-visibility", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.Edge
	c11374:p -> c11359:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.Vertex
	c11374:p -> c11354:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c11374:p -> c11390:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c11374:p -> c11389:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c11374:p -> c11384:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm extends pfc.models.ObservableModel
	c11355:p -> c11377:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm NAVASSOC pfc.models.algorithms.sldominance.SLDominanceAlgorithm
	c11377:p -> c11380:p [taillabel="", label="", headlabel="-slDominance", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm NAVASSOC pfc.models.Graph
	c11377:p -> c11358:p [taillabel="", label="", headlabel="-reduced", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm NAVASSOC pfc.models.Vertex
	c11377:p -> c11354:p [taillabel="", label="", headlabel="*\n-dummyVertices", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm DEPEND pfc.models.Edge
	c11377:p -> c11359:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm DEPEND pfc.models.algorithms.sldominance.DominanceDrawing
	c11377:p -> c11382:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.sldominance.SLDominanceAlgorithm extends pfc.models.ObservableModel
	c11355:p -> c11380:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm NAVASSOC pfc.models.Graph
	c11380:p -> c11358:p [taillabel="", label="", headlabel="-dominance", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm NAVASSOC pfc.models.algorithms.sldominance.DominanceDrawing
	c11380:p -> c11382:p [taillabel="", label="", headlabel="-drawing", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm DEPEND pfc.models.Edge
	c11380:p -> c11359:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm DEPEND pfc.models.Vertex
	c11380:p -> c11354:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.sldominance.DominanceDrawing extends pfc.models.ObservableModel
	c11355:p -> c11382:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.sldominance.DominanceDrawing NAVASSOC pfc.models.Graph
	c11382:p -> c11358:p [taillabel="", label="", headlabel="-graph", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing extends pfc.models.ObservableModel
	c11355:p -> c11384:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing NAVASSOC pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c11384:p -> c11389:p [taillabel="", label="", headlabel="*\n-vertexSegments", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing NAVASSOC pfc.models.algorithms.visibilityrepresentation.EdgeSegment
	c11384:p -> c11390:p [taillabel="", label="", headlabel="*\n-edgeSegments", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm extends pfc.models.ObservableModel
	c11355:p -> c11387:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm NAVASSOC pfc.models.Graph
	c11387:p -> c11358:p [taillabel="", label="", headlabel="-stGraphG", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm NAVASSOC pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing
	c11387:p -> c11384:p [taillabel="", label="", headlabel="-drawing", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.visibilityrepresentation.VertexSegment extends pfc.models.ObservableModel
	c11355:p -> c11389:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.visibilityrepresentation.VertexSegment NAVASSOC pfc.models.Vertex
	c11389:p -> c11354:p [taillabel="", label="", headlabel="*\n-vertex", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.visibilityrepresentation.EdgeSegment extends pfc.models.ObservableModel
	c11355:p -> c11390:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.visibilityrepresentation.EdgeSegment NAVASSOC pfc.models.Edge
	c11390:p -> c11359:p [taillabel="", label="", headlabel="*\n-edge", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.settings.UserSettings extends pfc.models.ObservableModel
	c11355:p -> c11395:p [dir=back,arrowtail=empty];
	//pfc.settings.GraphSettings extends pfc.models.ObservableModel
	c11355:p -> c11396:p [dir=back,arrowtail=empty];
}

