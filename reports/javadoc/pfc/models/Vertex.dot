#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// pfc.models.Vertex
	c16314 [label=<<table title="pfc.models.Vertex" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Vertex.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Vertex </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + id : ObservableModel.Property&lt;UUID&gt; </td></tr>
<tr><td align="left" balign="left"> + x : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + y : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + label : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + radius : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : ObservableModel.Property&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : ObservableModel.Property&lt;Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + weight : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : ObservableModel.Property&lt;String&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Vertex() </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : String) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : String, radius : double) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : String, radius : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Vertex(x : double, y : double, label : String, radius : double, color : int, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Vertex(members : Map&lt;String, Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Vertex(json : String) </td></tr>
<tr><td align="left" balign="left"> + getPoint2D() : Point2D </td></tr>
<tr><td align="left" balign="left"> + isIncident(edge : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Vertex.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.ObservableModel
	c16315 [label=<<table title="pfc.models.ObservableModel" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ObservableModel.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ObservableModel </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ObservableModel() </td></tr>
		</table></td></tr>
		</table>>, URL="./ObservableModel.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Graph
	c16318 [label=<<table title="pfc.models.Graph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Graph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Graph </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + name : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + vertices : List&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + edges : List&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + areLoopsAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areMultipleEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areDirectedEdgesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> + areCyclesAllowed : boolean </td></tr>
<tr><td align="left" balign="left"> - incidences : Map&lt;Vertex, Set&lt;Edge&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - elementObserver : Observer </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - newLabelAvailable : Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Graph() </td></tr>
<tr><td align="left" balign="left"> + Graph(attributes : Map&lt;String, Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + Graph(json : String) </td></tr>
<tr><td align="left" balign="left"> + Graph(name : String, areLoopsAllowed : boolean, areDirectedEdgesAllowed : boolean, areMultipleEdgesAllowed : boolean, areCyclesAllowed : boolean) </td></tr>
<tr><td align="left" balign="left"> + areConnected(from : Vertex, to : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getEdges(vertex : Vertex) : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges(from : Vertex, to : Vertex) : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesFrom(vertex : Vertex) : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdgesTo(vertex : Vertex) : Set&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighbors(vertex : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsIn(vertex : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsOut(vertex : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getNeighborsInOut(vertex : Vertex) : Set&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedEdges() : List&lt;Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getSelectedVertices() : List&lt;Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + hasSelectedEdges() : boolean </td></tr>
<tr><td align="left" balign="left"> + hasSelectedVertices() : boolean </td></tr>
<tr><td align="left" balign="left"> + selectAll(select : boolean) </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + translateSelected(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + union(graph : Graph) </td></tr>
<tr><td align="left" balign="left"> + setNewVertexLabelAvailable(newVertex : Vertex) </td></tr>
<tr><td align="left" balign="left"> + getNewLabelAvailable() : String </td></tr>
<tr><td align="left" balign="left"> + getVertexSource() : Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexTarget() : Vertex </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Graph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.Edge
	c16319 [label=<<table title="pfc.models.Edge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Edge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Edge </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isDirected : boolean </td></tr>
<tr><td align="left" balign="left"> + from : Vertex </td></tr>
<tr><td align="left" balign="left"> + to : Vertex </td></tr>
<tr><td align="left" balign="left"> + isLoop : boolean </td></tr>
<tr><td align="left" balign="left"> + weight : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + color : ObservableModel.Property&lt;Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + label : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> + isSelected : ObservableModel.Property&lt;Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> + thickness : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleX : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + handleY : ObservableModel.Property&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + tag : ObservableModel.Property&lt;String&gt; </td></tr>
<tr><td align="left" balign="left"> - arc : Arc2D.Double </td></tr>
<tr><td align="left" balign="left"> - line : Line2D.Double </td></tr>
<tr><td align="left" balign="left"> - center : Point2D.Double </td></tr>
<tr><td align="left" balign="left"> - bends : List&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - isLinear : boolean </td></tr>
<tr><td align="left" balign="left"> - notificationsSuspended : boolean </td></tr>
<tr><td align="left" balign="left"> - vertexObserver : Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex, weight : double) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex, weight : double, color : int) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex, weight : double, color : int, label : String) </td></tr>
<tr><td align="left" balign="left"> + Edge(isDirected : boolean, from : Vertex, to : Vertex, weight : double, color : int, label : String, isSelected : boolean) </td></tr>
<tr><td align="left" balign="left"> + Edge(members : Map&lt;String, Object&gt;, vertices : Map&lt;String, Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Edge(json : String, vertices : Map&lt;String, Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + getArc() : Arc2D </td></tr>
<tr><td align="left" balign="left"> + getCenter() : Point2D </td></tr>
<tr><td align="left" balign="left"> + getHandlePoint2D() : Point2D </td></tr>
<tr><td align="left" balign="left"> + getLine() : Line2D </td></tr>
<tr><td align="left" balign="left"> + getBends() : List&lt;Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> + getTotalOfBends() : int </td></tr>
<tr><td align="left" balign="left"> + setBends(bends : List&lt;Point2D&gt;) </td></tr>
<tr><td align="left" balign="left"> + isAdjacent(edge : Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + isIncident(vertex : Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + isLinear() : boolean </td></tr>
<tr><td align="left" balign="left"> + isPolyline() : boolean </td></tr>
<tr><td align="left" balign="left"> + refresh() </td></tr>
<tr><td align="left" balign="left"> + reset() </td></tr>
<tr><td align="left" balign="left"> + suspendNotifications(suspend : boolean) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateArc() </td></tr>
<tr><td align="left" balign="left"> - updateCenter() </td></tr>
		</table></td></tr>
		</table>>, URL="./Edge.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.Rotation
	c16321 [label=<<table title="pfc.models.algorithms.Rotation" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/Rotation.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Rotation </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Rotation(center : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : pfc.models.Vertex, reference : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : pfc.models.Vertex, neighbors : java.util.Set&lt;pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : pfc.models.Vertex, reference : pfc.models.Vertex, neighbors : java.util.Set&lt;pfc.models.Vertex&gt;) </td></tr>
<tr><td align="left" balign="left"> + Rotation(center : pfc.models.Vertex, neighbors : java.util.Set&lt;pfc.models.Vertex&gt;, reference : boolean) </td></tr>
<tr><td align="left" balign="left"> - determineReference(center : pfc.models.Vertex, neighbors : java.util.Set&lt;pfc.models.Vertex&gt;) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getClockwiseVertex(v : pfc.models.Vertex) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getCounterClockwiseVertex(v : pfc.models.Vertex) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + higher(v : pfc.models.Vertex) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + lower(v : pfc.models.Vertex) : pfc.models.Vertex </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/Rotation.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.NonIntersectingPathList
	c16322 [label=<<table title="pfc.models.algorithms.NonIntersectingPathList" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/NonIntersectingPathList.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NonIntersectingPathList </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + NonIntersectingPathList() </td></tr>
<tr><td align="left" balign="left"> + add(vertices : java.util.List&lt;pfc.models.Vertex&gt;, edges : java.util.List&lt;pfc.models.Edge&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + areVertexDisjoint() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsEdge(e : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsVertex(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + getAll(v : pfc.models.Vertex) : java.util.Set&lt;pfc.models.algorithms.DirectedPath&gt; </td></tr>
<tr><td align="left" balign="left"> + getLongestPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> + get(e : pfc.models.Edge) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> + removeVertex(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeEdge(e : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeAllVertices(vertices : java.util.List&lt;pfc.models.Vertex&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + removeAllEdges(edges : java.util.List&lt;pfc.models.Edge&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> + setSelected(selected : boolean) </td></tr>
<tr><td align="left" balign="left"> - isPathNonIntersecting(path : pfc.models.algorithms.DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> - areNonIntersectingPaths(path1 : pfc.models.algorithms.DirectedPath, path2 : pfc.models.algorithms.DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> - areVertexDisjointPaths(path1 : pfc.models.algorithms.DirectedPath, path2 : pfc.models.algorithms.DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> - areCrossedAtCommonVertex(path1 : pfc.models.algorithms.DirectedPath, path2 : pfc.models.algorithms.DirectedPath, v : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/NonIntersectingPathList.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.DualPathGraph
	c16323 [label=<<table title="pfc.models.algorithms.DualPathGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/DualPathGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DualPathGraph </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - pathsPI : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - vertexS : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - vertexT : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - faceS : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - faceT : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - leftEdgesFaces : java.util.Map&lt;pfc.models.Edge, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightEdgesFaces : java.util.Map&lt;pfc.models.Edge, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rotations : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - pathsFaces : java.util.Map&lt;pfc.models.algorithms.DirectedPath, pfc.models.Vertex&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DualPathGraph(stGraph : pfc.models.Graph, paths : pfc.models.algorithms.NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + left(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + right(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + orig(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + dest(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getPathFace(p : pfc.models.algorithms.DirectedPath) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexS() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexT() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceS() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceT() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - setVertexS() </td></tr>
<tr><td align="left" balign="left"> - setVertexT() </td></tr>
<tr><td align="left" balign="left"> - isVertexSource(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - isVertexTarget(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> - constructRotations() </td></tr>
<tr><td align="left" balign="left"> - getAllNeighbors(v : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + constructDualPathGraph() </td></tr>
<tr><td align="left" balign="left"> - coverAllEdges() </td></tr>
<tr><td align="left" balign="left"> - addSingleEdgePath(e : pfc.models.Edge) </td></tr>
<tr><td align="left" balign="left"> - setOuterFaces() </td></tr>
<tr><td align="left" balign="left"> - determineOuterEdges() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFaces() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFace(e : pfc.models.Edge) </td></tr>
<tr><td align="left" balign="left"> - setInnerFace(polygon : java.util.List&lt;java.awt.geom.Point2D&gt;, face : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - setPathFaces() </td></tr>
<tr><td align="left" balign="left"> - setDualPathEdges() </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/DualPathGraph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.DualGraph
	c16324 [label=<<table title="pfc.models.algorithms.DualGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/DualGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DualGraph </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - vertexS : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - vertexT : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - faceS : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - faceT : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - leftVerticesFaces : java.util.Map&lt;pfc.models.Vertex, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightVerticesFaces : java.util.Map&lt;pfc.models.Vertex, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - leftEdgesFaces : java.util.Map&lt;pfc.models.Edge, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rightEdgesFaces : java.util.Map&lt;pfc.models.Edge, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - rotations : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DualGraph(stGraph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + left(v : pfc.models.Vertex) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + right(v : pfc.models.Vertex) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + left(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + right(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + orig(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + dest(e : pfc.models.Edge) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexS() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexT() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceS() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getFaceT() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - constructRotations() </td></tr>
<tr><td align="left" balign="left"> + constructDualGraph() </td></tr>
<tr><td align="left" balign="left"> - setOuterFaces() </td></tr>
<tr><td align="left" balign="left"> - determineOuterEdges() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFaces() </td></tr>
<tr><td align="left" balign="left"> - determineInnerFace(e : pfc.models.Edge) </td></tr>
<tr><td align="left" balign="left"> - setInnerFace(polygon : java.util.List&lt;java.awt.geom.Point2D&gt;, face : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - setDualEdges() </td></tr>
<tr><td align="left" balign="left"> - setLeftRightVerticesFaces() </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/DualGraph.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.DirectedPath
	c16325 [label=<<table title="pfc.models.algorithms.DirectedPath" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/DirectedPath.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DirectedPath </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - vertices : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - edges : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> - incidences : java.util.Map&lt;pfc.models.Vertex, java.util.Set&lt;pfc.models.Edge&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - start : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - end : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - length : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DirectedPath() </td></tr>
<tr><td align="left" balign="left"> + createPath(vertices : java.util.List&lt;pfc.models.Vertex&gt;, edges : java.util.List&lt;pfc.models.Edge&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateEdges(edges : java.util.List&lt;pfc.models.Edge&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> - updateVertices() : boolean </td></tr>
<tr><td align="left" balign="left"> - traverse() : boolean </td></tr>
<tr><td align="left" balign="left"> + getVertices() : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getEdges() : java.util.Set&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + getStart() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getEnd() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getLength() : int </td></tr>
<tr><td align="left" balign="left"> + getVertexFrom(v : pfc.models.Vertex) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getVertexTo(v : pfc.models.Vertex) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getNeighbors(v : pfc.models.Vertex) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getCentralPoint() : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getCentralVertex() : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - getCentralEdge() : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> + isOuterVertex(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsVertex(v : pfc.models.Vertex) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsEdge(e : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + getCommonVertices(path : pfc.models.algorithms.DirectedPath) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + isVertexDisjoint(path : pfc.models.algorithms.DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> + isEdgeDisjoint(path : pfc.models.algorithms.DirectedPath) : boolean </td></tr>
<tr><td align="left" balign="left"> + join(path : pfc.models.algorithms.DirectedPath) </td></tr>
<tr><td align="left" balign="left"> + setSelected(selected : boolean) </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/DirectedPath.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm
	c16326 [label=<<table title="pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/constrainedpolyline/ConstrainedPolylineAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConstrainedPolylineAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.constrainedpolyline </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - polyline : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ConstrainedPolylineAlgorithm(stGraphG : pfc.models.Graph, paths : pfc.models.algorithms.NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getPolyline() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getLongEdgePositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getMedianPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, path : pfc.models.algorithms.DirectedPath) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/constrainedpolyline/ConstrainedPolylineAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c16328 [label=<<table title="pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/constrainedvisrep/ConstrainedVisRepAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.constrainedvisrep </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - stGraphG : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - stDualG : pfc.models.algorithms.DualPathGraph </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ConstrainedVisRepAlgorithm(stGraphG : pfc.models.Graph, paths : pfc.models.algorithms.NonIntersectingPathList) </td></tr>
<tr><td align="left" balign="left"> + getStDualG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getStGraphG() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingY() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + getTopologicalNumberingX() : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> + numberY(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + numberX(v : pfc.models.Vertex) : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> + getPathFace(path : pfc.models.algorithms.DirectedPath) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingY() </td></tr>
<tr><td align="left" balign="left"> - topologicalNumberingX() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getNumberXPaths(v : pfc.models.Vertex) : java.util.List&lt;java.lang.Integer&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/constrainedvisrep/ConstrainedVisRepAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm
	c16331 [label=<<table title="pfc.models.algorithms.orthogonal.OrthogonalAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/orthogonal/OrthogonalAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> OrthogonalAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.orthogonal </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - orthogonal : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - digraph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - paths : pfc.models.algorithms.NonIntersectingPathList </td></tr>
<tr><td align="left" balign="left"> - pathToVertices : java.util.Map&lt;pfc.models.algorithms.DirectedPath, java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.orthogonal.OrthogonalAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + OrthogonalAlgorithm(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getOrthogonal() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getDigraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - orientGraph() </td></tr>
<tr><td align="left" balign="left"> - selectPaths() </td></tr>
<tr><td align="left" balign="left"> - createPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - getLeftmostIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getRightmostOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianIncomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getMedianOutcomingEdge(v : pfc.models.Vertex, in : java.util.Set&lt;pfc.models.Edge&gt;, out : java.util.Set&lt;pfc.models.Edge&gt;) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - getNeighborsIn(in : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - getNeighborsOut(out : java.util.Set&lt;pfc.models.Edge&gt;) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - joinPaths(allPaths : java.util.List&lt;pfc.models.algorithms.DirectedPath&gt;, path : pfc.models.algorithms.DirectedPath) </td></tr>
<tr><td align="left" balign="left"> - executeVisibility() </td></tr>
<tr><td align="left" balign="left"> - constructVertices() </td></tr>
<tr><td align="left" balign="left"> - getPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment, neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getSTAxeXCoordinate(neighbors : java.util.Set&lt;pfc.models.Edge&gt;) : int </td></tr>
<tr><td align="left" balign="left"> - getPathPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getAssociatedPath(v : pfc.models.Vertex) : pfc.models.algorithms.DirectedPath </td></tr>
<tr><td align="left" balign="left"> - constructEdges() </td></tr>
<tr><td align="left" balign="left"> - calculateBends(e : pfc.models.Edge, newE : pfc.models.Edge) : java.util.List&lt;java.awt.geom.Point2D&gt; </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendFromSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToSTPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendSourcePositioning(s : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendTargetPositioning(t : pfc.models.Vertex, despl : int) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - isProblematicSTEdge(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment, st : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/orthogonal/OrthogonalAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm
	c16334 [label=<<table title="pfc.models.algorithms.polyline.UpwardPolylineAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/polyline/UpwardPolylineAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> UpwardPolylineAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.polyline </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - visibility : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationAlgorithm </td></tr>
<tr><td align="left" balign="left"> - polyline : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.polyline.UpwardPolylineAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + UpwardPolylineAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getVisibilityDrawing() : pfc.models.algorithms.visibilityrepresentation.VisibilityRepresentationDrawing </td></tr>
<tr><td align="left" balign="left"> + getPolyline() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - constructHorizontalVertices() </td></tr>
<tr><td align="left" balign="left"> - getLongEdgePositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getMedianPositioning(vS : pfc.models.algorithms.visibilityrepresentation.VertexSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - constructVerticalEdges() </td></tr>
<tr><td align="left" balign="left"> - getBendFromPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
<tr><td align="left" balign="left"> - getBendToPositioning(eS : pfc.models.algorithms.visibilityrepresentation.EdgeSegment) : java.awt.geom.Point2D </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/polyline/UpwardPolylineAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm
	c16337 [label=<<table title="pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/polylinedominance/PolylineDominanceAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> PolylineDominanceAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.polylinedominance </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - slDominance : pfc.models.algorithms.sldominance.SLDominanceAlgorithm </td></tr>
<tr><td align="left" balign="left"> - reduced : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - dummyVertices : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + PolylineDominanceAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getDominanceDrawing() : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> + getReduced() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - makeGraphReduced() </td></tr>
<tr><td align="left" balign="left"> - insertDummyVertex(e : pfc.models.Edge) </td></tr>
<tr><td align="left" balign="left"> - constructSLDominanceDrawing() </td></tr>
<tr><td align="left" balign="left"> - turnDummyVerticesIntoBends() </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/polylinedominance/PolylineDominanceAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm
	c16340 [label=<<table title="pfc.models.algorithms.sldominance.SLDominanceAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/sldominance/SLDominanceAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SLDominanceAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.sldominance </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - dominance : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - drawing : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> - rotationsOut : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - rotationsIn : java.util.Map&lt;pfc.models.Vertex, pfc.models.algorithms.Rotation&gt; </td></tr>
<tr><td align="left" balign="left"> - step : pfc.models.algorithms.sldominance.SLDominanceAlgorithm.Step </td></tr>
<tr><td align="left" balign="left"> - elementObserver : java.util.Observer </td></tr>
<tr><td align="left" balign="left"> - count : java.lang.Integer </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SLDominanceAlgorithm(stGraphG : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + getDrawing() : pfc.models.algorithms.sldominance.DominanceDrawing </td></tr>
<tr><td align="left" balign="left"> + getAlgorithmExplanation() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + executeAlgorithm() </td></tr>
<tr><td align="left" balign="left"> - preprocessGraph() </td></tr>
<tr><td align="left" balign="left"> - nextOut(v : pfc.models.Vertex, n : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - predOut(v : pfc.models.Vertex, n : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - firstOut(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - lastOut(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - firstIn(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - lastIn(v : pfc.models.Vertex) : pfc.models.Edge </td></tr>
<tr><td align="left" balign="left"> - assignPreliminaryCoordinates() </td></tr>
<tr><td align="left" balign="left"> - labelX(v : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - labelY(v : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinates() </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinatesX() </td></tr>
<tr><td align="left" balign="left"> - assignFinalCoordinatesY() </td></tr>
<tr><td align="left" balign="left"> - initXCoordinateVertices() : java.util.TreeSet&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - initYCoordinateVertices() : java.util.TreeSet&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - equalsDegreeInOut(u : pfc.models.Vertex, v : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/sldominance/SLDominanceAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c16349 [label=<<table title="pfc.models.algorithms.visibilityrepresentation.VertexSegment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./algorithms/visibilityrepresentation/VertexSegment.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VertexSegment </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.models.algorithms.visibilityrepresentation </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + yCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + xLeftCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + xRightCoordinate : pfc.models.ObservableModel.Property&lt;java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> + vertex : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> + id : pfc.models.ObservableModel.Property&lt;java.util.UUID&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VertexSegment() </td></tr>
<tr><td align="left" balign="left"> + VertexSegment(yCoordinate : java.lang.Integer, xLeftCoordinate : java.lang.Integer, xRightCoordinate : java.lang.Integer) </td></tr>
<tr><td align="left" balign="left"> + VertexSegment(yCoordinate : java.lang.Integer, xLeftCoordinate : java.lang.Integer, xRightCoordinate : java.lang.Integer, vertex : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> + VertexSegment(members : java.util.Map&lt;java.lang.String, java.lang.Object&gt;) </td></tr>
<tr><td align="left" balign="left"> + VertexSegment(json : java.lang.String) </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
		</table></td></tr>
		</table>>, URL="./algorithms/visibilityrepresentation/VertexSegment.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.WeaklyConnectedComponentsFinder
	c16368 [label=<<table title="pfc.utilities.graph.WeaklyConnectedComponentsFinder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../utilities/graph/WeaklyConnectedComponentsFinder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> WeaklyConnectedComponentsFinder </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - random : java.util.Random </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + WeaklyConnectedComponentsFinder() </td></tr>
<tr><td align="left" balign="left"> + find(graph : pfc.models.Graph) : java.util.Collection&lt;java.util.Collection&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - findParent(node : pfc.utilities.graph.WeaklyConnectedComponentsFinder.Node) : pfc.utilities.graph.WeaklyConnectedComponentsFinder.Node </td></tr>
<tr><td align="left" balign="left"> - unionSets(a : pfc.utilities.graph.WeaklyConnectedComponentsFinder.Node, b : pfc.utilities.graph.WeaklyConnectedComponentsFinder.Node) </td></tr>
		</table></td></tr>
		</table>>, URL="../utilities/graph/WeaklyConnectedComponentsFinder.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.StronglyConnectedComponentsFinder
	c16370 [label=<<table title="pfc.utilities.graph.StronglyConnectedComponentsFinder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../utilities/graph/StronglyConnectedComponentsFinder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> StronglyConnectedComponentsFinder </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - index : int </td></tr>
<tr><td align="left" balign="left"> - stack : java.util.Stack&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - indices : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - lowLinks : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - isOnStack : java.util.Map&lt;pfc.models.Vertex, java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> - components : java.util.Collection&lt;java.util.Collection&lt;pfc.models.Vertex&gt;&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + StronglyConnectedComponentsFinder() </td></tr>
<tr><td align="left" balign="left"> + find(graph : pfc.models.Graph) : java.util.Collection&lt;java.util.Collection&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - tarjansAlgorithm(from : pfc.models.Vertex, graph : pfc.models.Graph) </td></tr>
		</table></td></tr>
		</table>>, URL="../utilities/graph/StronglyConnectedComponentsFinder.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.RoyFloydWarshallDistancesAlgorithm
	c16371 [label=<<table title="pfc.utilities.graph.RoyFloydWarshallDistancesAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../utilities/graph/RoyFloydWarshallDistancesAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RoyFloydWarshallDistancesAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RoyFloydWarshallDistancesAlgorithm() </td></tr>
<tr><td align="left" balign="left"> + getDistanceMatrix(graph : pfc.models.Graph, weighted : boolean) : double[][] </td></tr>
		</table></td></tr>
		</table>>, URL="../utilities/graph/RoyFloydWarshallDistancesAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.DigraphTester
	c16373 [label=<<table title="pfc.utilities.graph.DigraphTester" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../utilities/graph/DigraphTester.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DigraphTester </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DigraphTester() </td></tr>
<tr><td align="left" balign="left"> + isSTGraph(graph : pfc.models.Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + areSTVerticesOnOuterFace(graph : pfc.models.Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isReducedDigraph(graph : pfc.models.Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + isTransitiveEdge(graph : pfc.models.Graph, e : pfc.models.Edge) : boolean </td></tr>
<tr><td align="left" balign="left"> + areConnected(graph : pfc.models.Graph, from : pfc.models.Vertex, to : pfc.models.Vertex) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../utilities/graph/DigraphTester.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.DepthFirstSearchFinder
	c16374 [label=<<table title="pfc.utilities.graph.DepthFirstSearchFinder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../utilities/graph/DepthFirstSearchFinder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DepthFirstSearchFinder </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - verticesExplored : java.util.Collection&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - edgesExplored : java.util.Collection&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalSorting : java.util.Map&lt;java.lang.Float, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - topologicalNumbering : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - order : java.lang.Float </td></tr>
<tr><td align="left" balign="left"> - seed : java.lang.Float </td></tr>
<tr><td align="left" balign="left"> - weight : java.lang.Float </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DepthFirstSearchFinder() </td></tr>
<tr><td align="left" balign="left"> + DepthFirstSearchFinder(seed : float, weight : float) </td></tr>
<tr><td align="left" balign="left"> + depthFirstSearch(v : pfc.models.Vertex, graph : pfc.models.Graph) : java.util.Collection&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + spanningTree(v : pfc.models.Vertex, graph : pfc.models.Graph) : java.util.Collection&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> + topologicalSorting(v : pfc.models.Vertex, graph : pfc.models.Graph) : java.util.Map&lt;java.lang.Float, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + topologicalNumbering(v : pfc.models.Vertex, graph : pfc.models.Graph) : java.util.Map&lt;pfc.models.Vertex, java.lang.Float&gt; </td></tr>
<tr><td align="left" balign="left"> - depthFirstSearchAlgorithm(v : pfc.models.Vertex, graph : pfc.models.Graph) </td></tr>
		</table></td></tr>
		</table>>, URL="../utilities/graph/DepthFirstSearchFinder.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.DegreeCounter
	c16375 [label=<<table title="pfc.utilities.graph.DegreeCounter" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../utilities/graph/DegreeCounter.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DegreeCounter </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DegreeCounter() </td></tr>
<tr><td align="left" balign="left"> + getMaximumDegree(g : pfc.models.Graph) : int </td></tr>
<tr><td align="left" balign="left"> + getMaximumDegree(g : pfc.models.Graph, selectedVertices : java.util.List&lt;pfc.models.Vertex&gt;) : int </td></tr>
		</table></td></tr>
		</table>>, URL="../utilities/graph/DegreeCounter.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.BipolarOrientationTarjanAlgorithm
	c16376 [label=<<table title="pfc.utilities.graph.BipolarOrientationTarjanAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../utilities/graph/BipolarOrientationTarjanAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BipolarOrientationTarjanAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - graph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - directed : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - source : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - target : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - pre_dfs_num : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - low : java.util.Map&lt;pfc.models.Vertex, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - parents : java.util.Map&lt;pfc.models.Vertex, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - sign : java.util.Map&lt;pfc.models.Vertex, java.lang.Boolean&gt; </td></tr>
<tr><td align="left" balign="left"> - listL : java.util.List&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - preorder : java.util.Deque&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - current : int </td></tr>
<tr><td align="left" balign="left"> - plus : boolean </td></tr>
<tr><td align="left" balign="left"> - minus : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BipolarOrientationTarjanAlgorithm(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + orientPlanarGraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - dfs(v : pfc.models.Vertex) </td></tr>
		</table></td></tr>
		</table>>, URL="../utilities/graph/BipolarOrientationTarjanAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm
	c16377 [label=<<table title="pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../utilities/graph/BipolarOrientationPapamanthouAlgorithm.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BipolarOrientationPapamanthouAlgorithm </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - graph : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - directed : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - source : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - target : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - counter : java.lang.Integer </td></tr>
<tr><td align="left" balign="left"> - n : int </td></tr>
<tr><td align="left" balign="left"> - setQ : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - timestamp : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - stNumbering : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - leafBlocks : java.util.Map&lt;pfc.models.Vertex, java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BipolarOrientationPapamanthouAlgorithm(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> + orientPlanarGraph() : pfc.models.Graph </td></tr>
<tr><td align="left" balign="left"> - stOrientationRecursive(v : pfc.models.Vertex) </td></tr>
<tr><td align="left" balign="left"> - chooseNextSource(nextSources : java.util.Set&lt;pfc.models.Vertex&gt;) : pfc.models.Vertex </td></tr>
<tr><td align="left" balign="left"> - updateBlocksCutPointsTree() </td></tr>
		</table></td></tr>
		</table>>, URL="../utilities/graph/BipolarOrientationPapamanthouAlgorithm.html", fontname="arial", fontcolor="black", fontsize=9.0];
	// pfc.utilities.graph.BiconnectedComponentsFinder
	c16378 [label=<<table title="pfc.utilities.graph.BiconnectedComponentsFinder" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../utilities/graph/BiconnectedComponentsFinder.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BiconnectedComponentsFinder </td></tr>
<tr><td align="center" balign="center"><font point-size="7.0"> pfc.utilities.graph </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - dfs_num : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - high : java.util.Map&lt;pfc.models.Vertex, java.lang.Integer&gt; </td></tr>
<tr><td align="left" balign="left"> - parents : java.util.Map&lt;pfc.models.Vertex, pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - bicomponents : java.util.Set&lt;java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - cut_points : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> - stack : java.util.Stack&lt;pfc.models.Edge&gt; </td></tr>
<tr><td align="left" balign="left"> - converse_depth : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BiconnectedComponentsFinder() </td></tr>
<tr><td align="left" balign="left"> + isBiconnected(graph : pfc.models.Graph) : boolean </td></tr>
<tr><td align="left" balign="left"> + getCutPoints(graph : pfc.models.Graph) : java.util.Set&lt;pfc.models.Vertex&gt; </td></tr>
<tr><td align="left" balign="left"> + getBiconnectedComponents(graph : pfc.models.Graph) : java.util.Set&lt;java.util.Set&lt;pfc.models.Vertex&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + find(graph : pfc.models.Graph) </td></tr>
<tr><td align="left" balign="left"> - findBiconnectedComponents(graph : pfc.models.Graph, v : pfc.models.Vertex, bicomponents : java.util.Set&lt;java.util.Set&lt;pfc.models.Vertex&gt;&gt;) </td></tr>
		</table></td></tr>
		</table>>, URL="../utilities/graph/BiconnectedComponentsFinder.html", fontname="arial", fontcolor="black", fontsize=9.0];
	//pfc.models.Vertex extends pfc.models.ObservableModel
	c16315:p -> c16314:p [dir=back,arrowtail=empty];
	//pfc.models.Graph extends pfc.models.ObservableModel
	c16315:p -> c16318:p [dir=back,arrowtail=empty];
	// pfc.models.Graph NAVASSOC pfc.models.Vertex
	c16318:p -> c16314:p [taillabel="", label="", headlabel="*\n-vertices", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Graph NAVASSOC pfc.models.Edge
	c16318:p -> c16319:p [taillabel="", label="", headlabel="*\n-edges", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.Edge extends pfc.models.ObservableModel
	c16315:p -> c16319:p [dir=back,arrowtail=empty];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c16319:p -> c16314:p [taillabel="", label="", headlabel="*\n-to", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.Edge NAVASSOC pfc.models.Vertex
	c16319:p -> c16314:p [taillabel="", label="", headlabel="*\n-from", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.Rotation NAVASSOC pfc.models.Vertex
	c16321:p -> c16314:p [taillabel="", label="", headlabel="*\n", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.NonIntersectingPathList DEPEND pfc.models.Edge
	c16322:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.NonIntersectingPathList DEPEND pfc.models.Vertex
	c16322:p -> c16314:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.NonIntersectingPathList DEPEND pfc.models.algorithms.Rotation
	c16322:p -> c16321:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.DualPathGraph extends pfc.models.Graph
	c16318:p -> c16323:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.Graph
	c16323:p -> c16318:p [taillabel="", label="", headlabel="-stGraphG", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.algorithms.NonIntersectingPathList
	c16323:p -> c16322:p [taillabel="", label="", headlabel="-pathsPI", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.Vertex
	c16323:p -> c16314:p [taillabel="", label="", headlabel="-vertexS", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.Vertex
	c16323:p -> c16314:p [taillabel="", label="", headlabel="-vertexT", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.Vertex
	c16323:p -> c16314:p [taillabel="", label="", headlabel="-faceS", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.Vertex
	c16323:p -> c16314:p [taillabel="", label="", headlabel="-faceT", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.Edge
	c16323:p -> c16319:p [taillabel="", label="", headlabel="*\n-leftEdgesFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.Edge
	c16323:p -> c16319:p [taillabel="", label="", headlabel="*\n-rightEdgesFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.algorithms.Rotation
	c16323:p -> c16321:p [taillabel="", label="", headlabel="*\n-rotations", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualPathGraph NAVASSOC pfc.models.algorithms.DirectedPath
	c16323:p -> c16325:p [taillabel="", label="", headlabel="*\n-pathsFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.DualGraph extends pfc.models.Graph
	c16318:p -> c16324:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Graph
	c16324:p -> c16318:p [taillabel="", label="", headlabel="-stGraphG", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c16324:p -> c16314:p [taillabel="", label="", headlabel="-vertexS", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c16324:p -> c16314:p [taillabel="", label="", headlabel="-vertexT", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c16324:p -> c16314:p [taillabel="", label="", headlabel="-faceS", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c16324:p -> c16314:p [taillabel="", label="", headlabel="-faceT", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c16324:p -> c16314:p [taillabel="", label="", headlabel="*\n-leftVerticesFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Vertex
	c16324:p -> c16314:p [taillabel="", label="", headlabel="*\n-rightVerticesFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Edge
	c16324:p -> c16319:p [taillabel="", label="", headlabel="*\n-leftEdgesFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.Edge
	c16324:p -> c16319:p [taillabel="", label="", headlabel="*\n-rightEdgesFaces", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DualGraph NAVASSOC pfc.models.algorithms.Rotation
	c16324:p -> c16321:p [taillabel="", label="", headlabel="*\n-rotations", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DirectedPath NAVASSOC pfc.models.Vertex
	c16325:p -> c16314:p [taillabel="", label="", headlabel="*\n-vertices", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DirectedPath NAVASSOC pfc.models.Edge
	c16325:p -> c16319:p [taillabel="", label="", headlabel="*\n-edges", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DirectedPath NAVASSOC pfc.models.Vertex
	c16325:p -> c16314:p [taillabel="", label="", headlabel="1\n-start", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.DirectedPath NAVASSOC pfc.models.Vertex
	c16325:p -> c16314:p [taillabel="", label="", headlabel="1\n-end", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	//pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm extends pfc.models.ObservableModel
	c16315:p -> c16326:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm NAVASSOC pfc.models.Graph
	c16326:p -> c16318:p [taillabel="", label="", headlabel="-polyline", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm NAVASSOC pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c16326:p -> c16328:p [taillabel="", label="", headlabel="-visibility", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm NAVASSOC pfc.models.algorithms.NonIntersectingPathList
	c16326:p -> c16322:p [taillabel="", label="", headlabel="-paths", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.models.algorithms.DirectedPath
	c16326:p -> c16325:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.models.Edge
	c16326:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.models.Vertex
	c16326:p -> c16314:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedpolyline.ConstrainedPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c16326:p -> c16349:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm extends pfc.models.ObservableModel
	c16315:p -> c16328:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm NAVASSOC pfc.models.Graph
	c16328:p -> c16318:p [taillabel="", label="", headlabel="-stGraphG", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm NAVASSOC pfc.models.algorithms.NonIntersectingPathList
	c16328:p -> c16322:p [taillabel="", label="", headlabel="-paths", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm NAVASSOC pfc.models.algorithms.DualPathGraph
	c16328:p -> c16323:p [taillabel="", label="", headlabel="-stDualG", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm DEPEND pfc.models.Edge
	c16328:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm DEPEND pfc.models.Vertex
	c16328:p -> c16314:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm DEPEND pfc.models.algorithms.DirectedPath
	c16328:p -> c16325:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c16328:p -> c16349:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.orthogonal.OrthogonalAlgorithm extends pfc.models.ObservableModel
	c16315:p -> c16331:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm NAVASSOC pfc.models.Graph
	c16331:p -> c16318:p [taillabel="", label="", headlabel="-orthogonal", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm NAVASSOC pfc.models.Graph
	c16331:p -> c16318:p [taillabel="", label="", headlabel="-digraph", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm NAVASSOC pfc.models.algorithms.NonIntersectingPathList
	c16331:p -> c16322:p [taillabel="", label="", headlabel="-paths", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm NAVASSOC pfc.models.algorithms.constrainedvisrep.ConstrainedVisRepAlgorithm
	c16331:p -> c16328:p [taillabel="", label="", headlabel="-visibility", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.Edge
	c16331:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.Vertex
	c16331:p -> c16314:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.algorithms.DirectedPath
	c16331:p -> c16325:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.algorithms.Rotation
	c16331:p -> c16321:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.orthogonal.OrthogonalAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c16331:p -> c16349:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.polyline.UpwardPolylineAlgorithm extends pfc.models.ObservableModel
	c16315:p -> c16334:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm NAVASSOC pfc.models.Graph
	c16334:p -> c16318:p [taillabel="", label="", headlabel="-polyline", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.Edge
	c16334:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.Vertex
	c16334:p -> c16314:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.polyline.UpwardPolylineAlgorithm DEPEND pfc.models.algorithms.visibilityrepresentation.VertexSegment
	c16334:p -> c16349:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm extends pfc.models.ObservableModel
	c16315:p -> c16337:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm NAVASSOC pfc.models.algorithms.sldominance.SLDominanceAlgorithm
	c16337:p -> c16340:p [taillabel="", label="", headlabel="-slDominance", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm NAVASSOC pfc.models.Graph
	c16337:p -> c16318:p [taillabel="", label="", headlabel="-reduced", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm NAVASSOC pfc.models.Vertex
	c16337:p -> c16314:p [taillabel="", label="", headlabel="*\n-dummyVertices", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.polylinedominance.PolylineDominanceAlgorithm DEPEND pfc.models.Edge
	c16337:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.sldominance.SLDominanceAlgorithm extends pfc.models.ObservableModel
	c16315:p -> c16340:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm NAVASSOC pfc.models.Graph
	c16340:p -> c16318:p [taillabel="", label="", headlabel="-dominance", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm DEPEND pfc.models.Edge
	c16340:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm DEPEND pfc.models.Vertex
	c16340:p -> c16314:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.models.algorithms.sldominance.SLDominanceAlgorithm DEPEND pfc.models.algorithms.Rotation
	c16340:p -> c16321:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	//pfc.models.algorithms.visibilityrepresentation.VertexSegment extends pfc.models.ObservableModel
	c16315:p -> c16349:p [dir=back,arrowtail=empty];
	// pfc.models.algorithms.visibilityrepresentation.VertexSegment NAVASSOC pfc.models.Vertex
	c16349:p -> c16314:p [taillabel="", label="", headlabel="*\n-vertex", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.WeaklyConnectedComponentsFinder DEPEND pfc.models.Graph
	c16368:p -> c16318:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.WeaklyConnectedComponentsFinder DEPEND pfc.models.Edge
	c16368:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.WeaklyConnectedComponentsFinder DEPEND pfc.models.Vertex
	c16368:p -> c16314:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.StronglyConnectedComponentsFinder DEPEND pfc.models.Graph
	c16370:p -> c16318:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.StronglyConnectedComponentsFinder DEPEND pfc.models.Edge
	c16370:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.StronglyConnectedComponentsFinder DEPEND pfc.models.Vertex
	c16370:p -> c16314:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.RoyFloydWarshallDistancesAlgorithm DEPEND pfc.models.Graph
	c16371:p -> c16318:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.RoyFloydWarshallDistancesAlgorithm DEPEND pfc.models.Edge
	c16371:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.RoyFloydWarshallDistancesAlgorithm DEPEND pfc.models.Vertex
	c16371:p -> c16314:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.DigraphTester DEPEND pfc.models.Graph
	c16373:p -> c16318:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.DigraphTester DEPEND pfc.models.Vertex
	c16373:p -> c16314:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.DigraphTester DEPEND pfc.models.Edge
	c16373:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.DepthFirstSearchFinder NAVASSOC pfc.models.Vertex
	c16374:p -> c16314:p [taillabel="", label="", headlabel="*\n-verticesExplored", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.DepthFirstSearchFinder NAVASSOC pfc.models.Edge
	c16374:p -> c16319:p [taillabel="", label="", headlabel="*\n-edgesExplored", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.DepthFirstSearchFinder NAVASSOC pfc.models.Vertex
	c16374:p -> c16314:p [taillabel="", label="", headlabel="*\n-topologicalSorting", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.DepthFirstSearchFinder NAVASSOC pfc.models.Vertex
	c16374:p -> c16314:p [taillabel="", label="", headlabel="1\n-target", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.DepthFirstSearchFinder DEPEND pfc.models.Edge
	c16374:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.DepthFirstSearchFinder DEPEND pfc.models.Graph
	c16374:p -> c16318:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.DegreeCounter DEPEND pfc.models.Graph
	c16375:p -> c16318:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.DegreeCounter DEPEND pfc.models.Edge
	c16375:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.DegreeCounter DEPEND pfc.models.Vertex
	c16375:p -> c16314:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.BipolarOrientationTarjanAlgorithm NAVASSOC pfc.models.Graph
	c16376:p -> c16318:p [taillabel="", label="", headlabel="1\n-graph", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationTarjanAlgorithm NAVASSOC pfc.models.Graph
	c16376:p -> c16318:p [taillabel="", label="", headlabel="1\n-directed", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationTarjanAlgorithm NAVASSOC pfc.models.Vertex
	c16376:p -> c16314:p [taillabel="", label="", headlabel="1\n-source", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationTarjanAlgorithm NAVASSOC pfc.models.Vertex
	c16376:p -> c16314:p [taillabel="", label="", headlabel="1\n-target", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationTarjanAlgorithm DEPEND pfc.models.Edge
	c16376:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm NAVASSOC pfc.models.Graph
	c16377:p -> c16318:p [taillabel="", label="", headlabel="1\n-graph", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm NAVASSOC pfc.models.Graph
	c16377:p -> c16318:p [taillabel="", label="", headlabel="1\n-directed", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm NAVASSOC pfc.models.Vertex
	c16377:p -> c16314:p [taillabel="", label="", headlabel="1\n-source", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm NAVASSOC pfc.models.Vertex
	c16377:p -> c16314:p [taillabel="", label="", headlabel="1\n-target", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// pfc.utilities.graph.BipolarOrientationPapamanthouAlgorithm DEPEND pfc.models.Edge
	c16377:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.BiconnectedComponentsFinder DEPEND pfc.models.Graph
	c16378:p -> c16318:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.BiconnectedComponentsFinder DEPEND pfc.models.Edge
	c16378:p -> c16319:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// pfc.utilities.graph.BiconnectedComponentsFinder DEPEND pfc.models.Vertex
	c16378:p -> c16314:p [taillabel="", label="", headlabel="", fontname="arial", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
}

