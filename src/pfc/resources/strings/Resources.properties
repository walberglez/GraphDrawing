
yes=Yes
no=No

file_menu_text=File
	file_new_menu_text=New...
	file_duplicate_menu_text=Duplicate
	file_open_menu_text=Open...
	file_save_menu_text=Save
	file_save_as_menu_text=Save As...
	file_print_menu_text=Print...
	file_exit_menu_text=Exit
edit_menu_text=Edit
	edit_undo_menu_text=Undo
	edit_redo_menu_text=Redo
	edit_cut_menu_text=Cut
	edit_copy_menu_text=Copy
	edit_paste_menu_text=Paste
	edit_select_all_menu_text=Select all
	edit_select_all_vertices_menu_text=Select all vertices
	edit_select_all_edges_menu_text=Select all edges
algorithms_menu_text=Algorithms
	algorithm_visibility_representation_menu_text=Visibility Representation
	algorithm_constrained_vis_rep_menu_text=Constrained Visibility Representation
	algorithm_upward_polyline_menu_text=Upward Polyline Drawing
	algorithm_constrained_upward_polyline_menu_text=Constrained Upward Polyline Drawing
	algorithm_orthogonal_menu_text=Orthogonal Drawing from Visibility
	algorithm_sl_dominance_menu_text=Straight Line Dominance
	algorithm_polyline_dominance_menu_text=Polyline Dominance
windows_menu_text=Windows
	windows_cascade_menu_text=Cascade
	windows_show_side_by_side_menu_text=Show side by side
	windows_show_stacked_menu_text=Show stacked
	windows_tile_menu_text=Tile
	windows_show_previous_menu_text=Show previous
	windows_show_next_menu_text=Show next
help_menu_text=Help
	help_contents_menu_text=Contents...
	help_about_menu_text=About...

pointer_tool_tooltip=Select / Move
graph_tool_tooltip=Add vertices and edges
cut_tool_tooltip=Remove elements
	
contract_button_tooltip=Contract
expand_button_tooltip=Expand

show_vertex_labels_button_tooltip=Show vertex labels
show_vertex_weights_button_tooltip=Show vertex weights
show_edge_labels_button_tooltip=Show edge labels
show_edge_weights_button_tooltip=Show edge weights

zoom_graph_button_tooltip=Zoom to fit graph
zoom_one_to_one_button_tooltip=Zoom 1:1
zoom_in_button_tooltip=Zoom in
zoom_out_button_tooltip=Zoom out

bipolar_orientation_button_tooltip=Execute Bipolar Orientation 

save_path_button_tooltip=Save a selected path
delete_paths_button_tooltip=Delete all saved paths
show_paths_button_tooltip=Show all saved paths

properties_menu_text=Properties
	properties_vertex_menu_text=Vertex
		properties_vertex_label_menu_text=Label
		properties_vertex_radius_menu_text=Radius
		properties_vertex_weight_menu_text=Weight
	properties_edge_menu_text=Edge
		properties_edge_label_menu_text=Label
		properties_edge_thickness_menu_text=Thickness
		properties_edge_weight_menu_text=Weight

new_vertex_label_dialog_text=New label:
new_vertex_radius_dialog_text=New radius:
new_vertex_weight_dialog_text=New weight:

new_edge_label_dialog_text=New label:
new_edge_thickness_dialog_text=New thickness:
new_edge_weight_dialog_text=New weight:

new_graph_dialog_title=New graph
new_graph_dialog_edges_label=Graph:
new_graph_dialog_undirected_edges_label=Undirected edges
new_graph_dialog_directed_edges_label=Directed edges
new_graph_dialog_other_characteristics_label=Other characteristics:
new_graph_dialog_allow_loops_label=Allow loops
new_graph_dialog_allow_multiple_edges_label=Allow multiple edges
new_graph_dialog_allow_cycles_label=Allow cycles

do_you_want_to_save_changes_dialog_message=Do you want to save changes to "%s"?
ok_button_text=Ok
cancel_button_text=Cancel

portable_network_graphics_file_description=Portable Network Graphics File
scalable_vector_graphics_file_description=Scalable Vector Graphics File
visigraph_file_description=VisiGraph Graph File

about_dialog_title=About
about_dialog_by_label=By %s
about_dialog_version_label=Version %s
about_dialog_copyright_line_0=© Copyright %1s %2s.  All rights reserved.
about_dialog_copyright_line_1=Published under the terms of the Eclipse Public License 1.0.
about_dialog_copyright_line_2=Visit %s
about_dialog_includes_line_0=This product includes software developed by Cameron Behar and others
about_dialog_includes_line_1=contributors. Go to http://code.google.com/p/visigraph/

graph_editor_window_title=Graph Editor
visibility_representation_window_title=Visibility Representation. Step by Step Execution
constrained_vis_rep_window_title=Constrained Visibility Representation. Step by Step Execution
upward_polyline_window_title=Upward Polyline Drawing. Step by Step Execution
constrained_upward_polyline_window_title=Constrained Upward Polyline Drawing. Step by Step Execution
orthogonal_window_title=Orthogonal Drawing from Visibility. Step by Step Execution
sl_dominance_window_title=Straight-Line Dominance Drawing. Step by Step Execution
polyline_dominance_window_title=Polyline Dominance Drawing. Step by Step Execution

step_by_step_control_title=Step By Step Control Buttons
step_by_step_cancel=Cancel the algorithm execution
step_by_step_previous=Go back to the previous execution step
step_by_step_next=Go to the next execution step
step_by_step_end=Finish the algorithm execution
step_by_step_explanation_title=Explanation of the algorithm execution

visibility_representation_dual_graph_title=Dual Graph
visibility_representation_diagram_title=Visibility Representation

constrained_vis_rep_dual_graph_title=Constrained Dual Graph
constrained_vis_rep_diagram_title=Constrained Visibility Representation

upward_polyline_graph_title=Upward Polyline Drawing

constrained_upward_polyline_graph_title=Constrained Upward Polyline Drawing

orthogonal_digraph_title=Directed Graph and Set of Paths
orthogonal_representation_diagram_title=Orthogonal Drawing

sl_dominance_diagram_title=Straight-Line Dominance Drawing

polyline_dominance_reduced_graph_title=Reduced Graph
polyline_dominance_diagram_title=Polyline Dominance Drawing

error_algorithm_window_dialog_message=It is impossible to apply the algorithm.\nCurrent window is not a Graph Editor window.
error_algorithm_graph_dialog_message=It is impossible to apply the algorithm.\nCurrent graph is not an acyclic directed st-graph.\nAlso, source and target vertices must be on the outer face.
error_algorithm_orthogonal_graph_dialog_message=It is impossible to apply the algorithm.\nCurrent graph is not an biconnected planar graph with vertices of degree at most four.
error_algorithm_paths_dialog_message=It is impossible to apply the algorithm.\nCurrent selected paths are not internal vertex disjoint. 
error_algorithm_reduced_graph_dialog_message=It is impossible to apply the algorithm.\nCurrent graph is not an reduced planar directed st-graph.
error_bipolar_orientation_dialog_message=It is impossible to apply the algorithm.\nCurrent graph must be undirected and biconnected.

visibility_representation_algorithm_step_dual=Step 1- Construction of the planar dual st-graph G*.
visibility_representation_algorithm_step_topo_num_graph_y=Step 2- Computation of an topological numbering Y of G.
visibility_representation_algorithm_step_topo_num_dual_x=Step 3- Computation of an topological numbering X of G*.
visibility_representation_algorithm_step_horizontal_vertices=Step 4- For each vertex v draw the vertex-segment at y-coordinate Y(v) and between x-coordinates X(left(v)) and X(right(v)) - 1.
visibility_representation_algorithm_step_vertical_edges=Step 5- For each edge e draw the edge-segment at x-coordinate X(left(e)) and between y-coordinates Y(orig(e)) and Y(dest(e)).

constrained_vis_rep_algorithm_step_dual=Step 1- Construction of the planar dual st-graph Gpi.
constrained_vis_rep_algorithm_step_topo_num_graph_y=Step 2- Computation of an topological numbering Y of G, such that Y(s) = 0. Assing unit weights to the edges of G.
constrained_vis_rep_algorithm_step_topo_num_dual_x=Step 3- Computation of an topological numbering X of Gpi, such that X(s*) = -0,5. Assing half-unit weights to the edges of Gpi.
constrained_vis_rep_algorithm_step_horizontal_vertices=Step 4- For each vertex v draw the vertex-segment at y-coordinate Y(v) and between x-coordinates min X(pi) and max X(pi) for each path pi which contains v.
constrained_vis_rep_algorithm_step_vertical_edges=Step 5- For each edge e draw the edge-segment at x-coordinate X(pi) and between y-coordinates Y(orig(e)) and Y(dest(e)). Pi is the path which contains e.

upward_polyline_algorithm_step_visibility=Step 1- Construction of the visibility representation of st-graph G.
upward_polyline_algorithm_step_horizontal_vertices=Step 2- For each vertex v replace its vertex-segment of v with an arbitrary point P(v) = (x(v), y(v)) placed at a long-edge position.
upward_polyline_algorithm_step_vertical_edges=Step 3- For each edge e=(u,v) replace its edge-segment with the segment with endpoints P(u) and P(v), if it is a short edge. Replace its edge-segment with the polygonal line from P(u) to P(v) through points (x(e), y(u)+1) and (x(e), y(v)-1), otherwise.

constrained_polyline_algorithm_step_visibility=Step 1- Construction of the constrained visibility representation of st-graph G with respect to the paths PI.
constrained_polyline_algorithm_step_horizontal_vertices=Step 2- For each vertex v replace its vertex-segment of v with an arbitrary point P(v) = (x(v), y(v)). If v belongs to a path pi of PI, x(v) = X(pi) and y(v) = Y(v). Otherwise, choose any point on vertex-segment of v.
constrained_polyline_algorithm_step_vertical_edges=Step 3- For each edge e=(u,v) replace its edge-segment with the segment with endpoints P(u) and P(v), if it is a short edge. Replace its edge-segment with the polygonal line from P(u) to P(v) through points (x(e), y(u)+1) and (x(e), y(v)-1), otherwise.

orthogonal_algorithm_step_orientation=Step 1- Bipolar orientation of the edges of G such that the resulting digraph D is a planar st-graph. 
orthogonal_algorithm_step_paths=Step 2- Creation of a set of n-2 directed paths of D associated with the vertices of D distinct from vertices source and target. Each path has two edges. Unification of paths sharing edges, which yields a set of PI nonintersecting paths. 
orthogonal_algorithm_step_visibility=Step 3- Construction of the constrained visibility representation T of D, with repect to the set PI of nonintersecting paths. 
orthogonal_algorithm_step_vertices=Step 4- For each vertex v of D draw v at the intersection P(v) of its vertex segment with the edge segments of path pi of v, if v is distinct from source or target. Draw vertex source at the intersection of its vertex segment with the edge segment of its median outgoing edge. Draw vertex target at the intersection of its vertex segment with the edge segment of its median incoming edge.
orthogonal_algorithm_step_edges=Step 5- For each edge e=(u,v) of D, if u and v are distinct from source and target, draw e as an orthogonal chain through the points: P(u), the intersectiong of T(u) and T(e), the intersection of T(e) and T(v), and P(v). Otherwise, .

sl_dominance_algorithm_step_preliminary_layout=Step 1- Preliminary Layout: assigns to each vertex v of G a distinct X- and Y-coordinate in the range [0,n-1].
sl_dominance_algorithm_step_compaction=Step 2- Compactation: adjust the position of the vertices to reduce the area of the drawing.

polyline_dominance_algorithm_step_reduced=Step 1- If G is not reduced, replace each transitive edge (u,v) with a chain of two edges, that is, a new vertex x (dummy vertex) and two new edges (u,x) and (x,v).
polyline_dominance_algorithm_step_sl_dominance=Step 2- Construction of a straight-line dominance drawing of G'.
polyline_dominance_algorithm_step_polyline_bends=Step 3- Remove all dummy vertices from the dominance drawing and insert all transitive edges again considering dummy vertices as bends.   